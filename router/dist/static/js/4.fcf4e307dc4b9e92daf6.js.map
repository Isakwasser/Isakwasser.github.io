{"version":3,"sources":["webpack:///./node_modules/chroma-js/chroma.js","webpack:///./src/assets/audio/app07/sound.wav","webpack:///./node_modules/core-js/library/fn/number/is-nan.js","webpack:///./node_modules/babel-runtime/core-js/number/is-nan.js","webpack:///./node_modules/core-js/library/modules/es6.number.is-nan.js","webpack:///./src/components/pages/appDigital/appS07/js/appS07.js","webpack:///./src/components/pages/appDigital/appS07/appS07.vue?6c5f","webpack:///./src/components/pages/appDigital/appS07/appS07.vue","webpack:///./node_modules/spectrogram/spectrogram.js"],"names":["factory","limit$2","x","min","max","limit$1","classToType","i$1","list$1","length","name","toLowerCase","type$p","obj","Object","prototype","toString","call","type$o","type$n","PI$2","Math","PI","utils","clip_rgb","rgb","_clipped","_unclipped","slice","i","limit","type","unpack","args","keyOrder","Array","split","filter","k","undefined","map","last","l","TWOPI","PITHIRD","DEG2RAD","RAD2DEG","input$h","format","autodetect","last$3","clip_rgb$2","type$m","_input","Color$D","len","arguments","constructor","this","mode","sorted","sort","a","b","p","list","chk","test","apply","Error","_rgb","push","hex","join","Color_1","chroma$k","Function","bind","Color","concat","version","chroma_1","unpack$A","max$2","unpack$z","cmyk2rgb_1","c","m","y","alpha","chroma$j","Color$C","input$g","unpack$y","type$l","rgb2cmyk","ref","r","g","f","cmyk","unpack$x","last$2","rnd","round","unpack$w","rgb2hsl_1","s","h","Number","NaN","unpack$v","last$1","hsl2css","hsla","rgb2hsl$2","round$6","rgb2css_1","rgba","substr","unpack$u","round$5","hsl2rgb_1","assign","t3","t2","t1","h_","hsl2rgb","input$f","RE_RGB","RE_RGBA","RE_RGB_PCT","RE_RGBA_PCT","RE_HSL","RE_HSLA","round$4","css2rgb$1","css","trim","named","e","match","rgb$1","rgb$2","i$2","rgb$3","i$3","hsl","rgb$4","hsl$1","rgb$5","chroma$i","Color$B","input$e","type$k","rgb2css","css2rgb","rest","Color$A","chroma$h","unpack$t","gl","unpack$s","rgb2hcg_1","delta","_g","unpack$r","floor$3","floor","hcg2rgb_1","assign$1","assign$2","assign$3","assign$4","assign$5","_c","q","t","v","unpack$q","type$j","chroma$g","Color$z","input$c","rgb2hcg","hcg","unpack$p","round$3","rgb2hex_1","str","hxa","RE_HEX","RE_HEXA","hex2rgb_1","u","parseInt","u$1","chroma$f","Color$y","type$i","input$b","rgb2hex$1","indexOf","unpack$o","TWOPI$2","min$2","sqrt$4","sqrt","acos","rgb2hsi_1","min_","unpack$n","TWOPI$1","cos$4","cos","hsi2rgb_1","isNaN","unpack$m","type$h","chroma$e","Color$x","input$a","rgb2hsi","hsi","unpack$l","type$g","chroma$d","Color$w","input$9","rgb2hsl$1","unpack$k","min$1","max$1","rgb2hsv$1","max_","unpack$j","floor$2","hsv2rgb_1","unpack$i","type$f","chroma$c","Color$v","input$8","rgb2hsv","hsv","labConstants","Kn","Xn","Yn","Zn","t0","LAB_CONSTANTS$3","unpack$h","pow$a","pow","rgb_xyz","xyz_lab","rgb2xyz","rgb2lab_1","ref$1","z","LAB_CONSTANTS$2","unpack$g","pow$9","xyz_rgb","lab_xyz","lab2rgb_1","unpack$f","type$e","chroma$b","Color$u","input$7","rgb2lab$1","lab","unpack$e","sqrt$3","atan2$2","atan2","round$2","lab2lch_1","unpack$d","rgb2lab","lab2lch$1","rgb2lch_1","b_","unpack$c","sin$3","sin","cos$3","lch2lab_1","unpack$b","lch2lab$1","lab2rgb","lch2rgb_1","L","unpack$a","lch2rgb","hcl2rgb_1","hcl","reverse","unpack$9","type$d","chroma$a","Color$t","input$6","rgb2lch","lch","forEach","w3cx11_1","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","input$5","type$c","w3cx11","hex2rgb","rgb2hex","keys","n","unpack$8","type$b","num2rgb_1","num","chroma$9","Color$r","input$4","type$a","rgb2num","chroma$8","Color$q","input$3","unpack$7","type$9","round$1","log$1","log","temperature2rgb_1","kelvin","temp","temperature2rgb","unpack$6","chroma$7","Color$p","input$2","rgb2temperature","minTemp","maxTemp","temperature","unpack$5","cbrt","pow$8","sign$1","sign","rgb2oklab_1","rgb2lrgb","lr","lg","lb","abs","unpack$4","pow$7","oklab2rgb_1","lrgb2rgb","unpack$3","type$8","chroma$6","Color$o","input$1","rgb2oklab$1","oklab","unpack$2","rgb2oklab","lab2lch","unpack$1","lch2lab","oklab2rgb","oklch2rgb_1","type$7","chroma$5","Color$n","input","rgb2oklch","oklch","Color$m","type$6","mutate","clipped","Color$k","LAB_CONSTANTS$1","darken","amount","brighten","darker","brighter","get","mc","channel","src","Color$i","type$5","pow$6","luminance","lum","max_iter","low","high","mid","interpolate","lm","rgb2luminance","luminance_x","interpolator$1","Color$h","type$4","interpolator","mix$1","col1","col2","Color$g","mix","Color$f","premultiply","Color$e","LAB_CONSTANTS","saturate","desaturate","Color$d","type$3","set","value","charAt","out","Color$c","xyz0","xyz1","Color$b","sqrt$2","pow$5","lrgb","x1","y1","z1","x2","y2","z2","Color$a","Color$9","_hsx","hue0","hue1","sat0","sat1","lbv0","lbv1","sat","hue","lbv","interpolate_hsx$5","Color$8","c1","c2","interpolate_hsx$4","interpolate_hsx$3","interpolate_hsx$2","interpolate_hsx$1","Color$7","interpolate_hsx","Color$6","clip_rgb$1","pow$4","sqrt$1","PI$1","cos$2","sin$2","atan2$1","_average_lrgb","colors","weights","xyz","col","chroma$4","type$2","pow$3","scale$2","_mode","_nacol","_spread","_domain","_pos","_padding","_classes","_colors","_out","_min","_max","_correctLightness","_colorCache","_useCache","_gamma","setColors","brewer","c$1","resetCache","tMapLightness","tMapDomain","getColor","val","bypassMap","getClass","classes","d","analyze","limits","domain","from","tOut","tBreaks","every","_m","range","_o","spread","correctLightness","L0","L1","pol","L_actual","L_ideal","L_diff","padding","numColors","result","dm","dd","left","right","inclusive","ascending","end","__range__","samples","asc","cache","gamma","nodata","Color$5","scale$1","chroma$3","blend","bottom","top","blend_f","c0","each","normal","multiply","screen","overlay","lighten","dodge","burn","blend_1","type$1","pow$2","sin$1","cos$1","chroma$2","Color$4","floor$1","random","pow$1","abs$1","data","key","MAX_VALUE","sum","values","count","min_log","LOG10E","max_log","pb","pr","cluster","assignments","clusterSizes","repeat","nb_iters","centroids","j","i$4","mindist","best","j$1","dist","newCentroids","j$2","i$5","j$3","j$4","kClusters","j$5","i$6","tmpKMeansBreaks","j$6","i$7","analyze_1","Color$3","Color$2","exp","Color$1","chroma$1","scale","scales","cool","hot","colorbrewer","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","colorbrewer_1","chroma","average","reduce","w","first","shift","cnt","dx","dy","A","ci","xyz2","A$1","bezier","I","lab0","lab1","lab2","lab3","RangeError","labs","row","newrow","binom_row","el","cubehelix","start","rotations","lightness","dl","dh","fract","amp","cos_a","sin_a","code","contrast","l1","l2","deltaE","Kl","Kc","Kh","rad2deg","rad","deg2rad","deg","a1","b1","L2","a2","b2","avgL","avgC","G","a1p","a2p","C1p","C2p","avgCp","arctan1","arctan2","h1p","h2p","avgHp","T","deltaHp","deltaL","deltaCp","sl","sc","sh","deltaTheta","Rt","distance","sum_sq","valid","module","exports","__webpack_require__","default","__esModule","$export","S","number","steps","color","appS07","soundBuffer","soundMusic","methods","getSoundBytes","_this","context","AudioContext","webkitAudioContext","request","XMLHttpRequest","open","$refs","audio","responseType","onload","decodeAudioData","response","buffer","console","sampleRate","err","send","getOriginalSpectrogram","spectro","Spectrogram","spectrogram_original","enable","canvas","width","height","audioContext","connectSource","getButterLowSpectrogram","newAudioBuffer","cloneAudioBuffer","getChannelData","spectrogram_ButterLow","getCheby1LowSpectrogram","spectrogram_Cheby1Low","getCheby2LowSpectrogram","spectrogram_Cheby2Low","getEllipLowSpectrogram","spectrogram_EllipLow","getButterHighSpectrogram","spectrogram_ButterHigh","getCheby1HighSpectrogram","spectrogram_Cheby1High","getCheby2HighSpectrogram","spectrogram_Cheby2High","getEllipHighSpectrogram","spectrogram_EllipHigh","getButterBandSpectrogram","spectrogram_ButterBand","getCheby1BandSpectrogram","spectrogram_Cheby1Band","getCheby2BandSpectrogram","spectrogram_Cheby2Band","getEllipBandSpectrogram","spectrogram_EllipBand","getButterStopSpectrogram","spectrogram_ButterStop","getCheby1StopSpectrogram","spectrogram_Cheby1Stop","getCheby2StopSpectrogram","spectrogram_Cheby2Stop","getEllipStopSpectrogram","spectrogram_EllipStop","getCheby2threeSpectrogram","spectrogram_Cheby2three","getDeleteVoiceSpectrogram","temp1","temp2","spectrogram_DeleteVoice","playMusic","myArrayBuffer","audioCtx","window","source","createBufferSource","connect","destination","array","inputSignal","prevSum","is_nan_default","newBuffer","AudioBuffer","computed","lowpassFreq","highpassFreq","watch","localStorage","setItem","mounted","getItem","appS07_appS07","render","_vm","_h","$createElement","_self","staticClass","_v","attrs","controls","on","click","_s","directives","rawName","expression","domProps","checked","isArray","_i","change","$event","$$a","$$el","target","$$c","$$i","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__","root","_result","_isFunction","options","baseCanvasOptions","_audioEnded","_paused","_pausedAt","_startedAt","_sources","audioBufferStream","userMediaStream","_baseCanvas","_baseCanvasContext","getContext","onresize","audioOptions","_generateDefaultColors","fillStyle","_getColor","fillRect","_init","scriptNode","createScriptProcessor","onaudioprocess","event","Uint8Array","analyser","frequencyBinCount","getByteFrequencyData","_draw","canvasContext","sourceNode","onended","stop","createAnalyser","smoothingTimeConstant","fftSize","tempCanvasContext","_tempContext","tempCanvas","drawImage","translate","setTransform","_startMediaStreamDraw","requestAnimationFrame","audioData","audioBuffer","document","createElement","offset","sourceMedia","Date","now","pause","resume","clear","clearRect","frequency","toRGBString","index"],"mappings":"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","file":"static/js/4.fcf4e307dc4b9e92daf6.js","sourcesContent":["/**\n * chroma.js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2019, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n * derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * -------------------------------------------------------\n *\n * chroma.js includes colors from colorbrewer2.org, which are released under\n * the following license:\n *\n * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,\n * and The Pennsylvania State University.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n * ------------------------------------------------------\n *\n * Named colors are taken from X11 Color Names.\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @preserve\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.chroma = factory());\n})(this, (function () { 'use strict';\n\n    var limit$2 = function (x, min, max) {\n        if ( min === void 0 ) min=0;\n        if ( max === void 0 ) max=1;\n\n        return x < min ? min : x > max ? max : x;\n    };\n\n    var limit$1 = limit$2;\n\n    var clip_rgb$3 = function (rgb) {\n        rgb._clipped = false;\n        rgb._unclipped = rgb.slice(0);\n        for (var i=0; i<=3; i++) {\n            if (i < 3) {\n                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }\n                rgb[i] = limit$1(rgb[i], 0, 255);\n            } else if (i === 3) {\n                rgb[i] = limit$1(rgb[i], 0, 1);\n            }\n        }\n        return rgb;\n    };\n\n    // ported from jQuery's $.type\n    var classToType = {};\n    for (var i$1 = 0, list$1 = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i$1 < list$1.length; i$1 += 1) {\n        var name = list$1[i$1];\n\n        classToType[(\"[object \" + name + \"]\")] = name.toLowerCase();\n    }\n    var type$p = function(obj) {\n        return classToType[Object.prototype.toString.call(obj)] || \"object\";\n    };\n\n    var type$o = type$p;\n\n    var unpack$B = function (args, keyOrder) {\n        if ( keyOrder === void 0 ) keyOrder=null;\n\n    \t// if called with more than 3 arguments, we return the arguments\n        if (args.length >= 3) { return Array.prototype.slice.call(args); }\n        // with less than 3 args we check if first arg is object\n        // and use the keyOrder string to extract and sort properties\n    \tif (type$o(args[0]) == 'object' && keyOrder) {\n    \t\treturn keyOrder.split('')\n    \t\t\t.filter(function (k) { return args[0][k] !== undefined; })\n    \t\t\t.map(function (k) { return args[0][k]; });\n    \t}\n    \t// otherwise we just return the first argument\n    \t// (which we suppose is an array of args)\n        return args[0];\n    };\n\n    var type$n = type$p;\n\n    var last$4 = function (args) {\n        if (args.length < 2) { return null; }\n        var l = args.length-1;\n        if (type$n(args[l]) == 'string') { return args[l].toLowerCase(); }\n        return null;\n    };\n\n    var PI$2 = Math.PI;\n\n    var utils = {\n    \tclip_rgb: clip_rgb$3,\n    \tlimit: limit$2,\n    \ttype: type$p,\n    \tunpack: unpack$B,\n    \tlast: last$4,\n    \tPI: PI$2,\n    \tTWOPI: PI$2*2,\n    \tPITHIRD: PI$2/3,\n    \tDEG2RAD: PI$2 / 180,\n    \tRAD2DEG: 180 / PI$2\n    };\n\n    var input$h = {\n    \tformat: {},\n    \tautodetect: []\n    };\n\n    var last$3 = utils.last;\n    var clip_rgb$2 = utils.clip_rgb;\n    var type$m = utils.type;\n    var _input = input$h;\n\n    var Color$D = function Color() {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var me = this;\n        if (type$m(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n\n        // last argument could be the mode\n        var mode = last$3(args);\n        var autodetect = false;\n\n        if (!mode) {\n            autodetect = true;\n            if (!_input.sorted) {\n                _input.autodetect = _input.autodetect.sort(function (a,b) { return b.p - a.p; });\n                _input.sorted = true;\n            }\n            // auto-detect format\n            for (var i = 0, list = _input.autodetect; i < list.length; i += 1) {\n                var chk = list[i];\n\n                mode = chk.test.apply(chk, args);\n                if (mode) { break; }\n            }\n        }\n\n        if (_input.format[mode]) {\n            var rgb = _input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));\n            me._rgb = clip_rgb$2(rgb);\n        } else {\n            throw new Error('unknown format: '+args);\n        }\n\n        // add alpha channel\n        if (me._rgb.length === 3) { me._rgb.push(1); }\n    };\n\n    Color$D.prototype.toString = function toString () {\n        if (type$m(this.hex) == 'function') { return this.hex(); }\n        return (\"[\" + (this._rgb.join(',')) + \"]\");\n    };\n\n    var Color_1 = Color$D;\n\n    var chroma$k = function () {\n    \tvar args = [], len = arguments.length;\n    \twhile ( len-- ) args[ len ] = arguments[ len ];\n\n    \treturn new (Function.prototype.bind.apply( chroma$k.Color, [ null ].concat( args) ));\n    };\n\n    chroma$k.Color = Color_1;\n    chroma$k.version = '2.4.2';\n\n    var chroma_1 = chroma$k;\n\n    var unpack$A = utils.unpack;\n    var max$2 = Math.max;\n\n    var rgb2cmyk$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$A(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var k = 1 - max$2(r,max$2(g,b));\n        var f = k < 1 ? 1 / (1-k) : 0;\n        var c = (1-r-k) * f;\n        var m = (1-g-k) * f;\n        var y = (1-b-k) * f;\n        return [c,m,y,k];\n    };\n\n    var rgb2cmyk_1 = rgb2cmyk$1;\n\n    var unpack$z = utils.unpack;\n\n    var cmyk2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$z(args, 'cmyk');\n        var c = args[0];\n        var m = args[1];\n        var y = args[2];\n        var k = args[3];\n        var alpha = args.length > 4 ? args[4] : 1;\n        if (k === 1) { return [0,0,0,alpha]; }\n        return [\n            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r\n            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g\n            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b\n            alpha\n        ];\n    };\n\n    var cmyk2rgb_1 = cmyk2rgb;\n\n    var chroma$j = chroma_1;\n    var Color$C = Color_1;\n    var input$g = input$h;\n    var unpack$y = utils.unpack;\n    var type$l = utils.type;\n\n    var rgb2cmyk = rgb2cmyk_1;\n\n    Color$C.prototype.cmyk = function() {\n        return rgb2cmyk(this._rgb);\n    };\n\n    chroma$j.cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$C, [ null ].concat( args, ['cmyk']) ));\n    };\n\n    input$g.format.cmyk = cmyk2rgb_1;\n\n    input$g.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$y(args, 'cmyk');\n            if (type$l(args) === 'array' && args.length === 4) {\n                return 'cmyk';\n            }\n        }\n    });\n\n    var unpack$x = utils.unpack;\n    var last$2 = utils.last;\n    var rnd = function (a) { return Math.round(a*100)/100; };\n\n    /*\n     * supported arguments:\n     * - hsl2css(h,s,l)\n     * - hsl2css(h,s,l,a)\n     * - hsl2css([h,s,l], mode)\n     * - hsl2css([h,s,l,a], mode)\n     * - hsl2css({h,s,l,a}, mode)\n     */\n    var hsl2css$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hsla = unpack$x(args, 'hsla');\n        var mode = last$2(args) || 'lsa';\n        hsla[0] = rnd(hsla[0] || 0);\n        hsla[1] = rnd(hsla[1]*100) + '%';\n        hsla[2] = rnd(hsla[2]*100) + '%';\n        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {\n            hsla[3] = hsla.length > 3 ? hsla[3] : 1;\n            mode = 'hsla';\n        } else {\n            hsla.length = 3;\n        }\n        return (mode + \"(\" + (hsla.join(',')) + \")\");\n    };\n\n    var hsl2css_1 = hsl2css$1;\n\n    var unpack$w = utils.unpack;\n\n    /*\n     * supported arguments:\n     * - rgb2hsl(r,g,b)\n     * - rgb2hsl(r,g,b,a)\n     * - rgb2hsl([r,g,b])\n     * - rgb2hsl([r,g,b,a])\n     * - rgb2hsl({r,g,b,a})\n     */\n    var rgb2hsl$3 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$w(args, 'rgba');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n\n        var l = (max + min) / 2;\n        var s, h;\n\n        if (max === min){\n            s = 0;\n            h = Number.NaN;\n        } else {\n            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n        }\n\n        if (r == max) { h = (g - b) / (max - min); }\n        else if (g == max) { h = 2 + (b - r) / (max - min); }\n        else if (b == max) { h = 4 + (r - g) / (max - min); }\n\n        h *= 60;\n        if (h < 0) { h += 360; }\n        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }\n        return [h,s,l];\n    };\n\n    var rgb2hsl_1 = rgb2hsl$3;\n\n    var unpack$v = utils.unpack;\n    var last$1 = utils.last;\n    var hsl2css = hsl2css_1;\n    var rgb2hsl$2 = rgb2hsl_1;\n    var round$6 = Math.round;\n\n    /*\n     * supported arguments:\n     * - rgb2css(r,g,b)\n     * - rgb2css(r,g,b,a)\n     * - rgb2css([r,g,b], mode)\n     * - rgb2css([r,g,b,a], mode)\n     * - rgb2css({r,g,b,a}, mode)\n     */\n    var rgb2css$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack$v(args, 'rgba');\n        var mode = last$1(args) || 'rgb';\n        if (mode.substr(0,3) == 'hsl') {\n            return hsl2css(rgb2hsl$2(rgba), mode);\n        }\n        rgba[0] = round$6(rgba[0]);\n        rgba[1] = round$6(rgba[1]);\n        rgba[2] = round$6(rgba[2]);\n        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {\n            rgba[3] = rgba.length > 3 ? rgba[3] : 1;\n            mode = 'rgba';\n        }\n        return (mode + \"(\" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + \")\");\n    };\n\n    var rgb2css_1 = rgb2css$1;\n\n    var unpack$u = utils.unpack;\n    var round$5 = Math.round;\n\n    var hsl2rgb$1 = function () {\n        var assign;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$u(args, 'hsl');\n        var h = args[0];\n        var s = args[1];\n        var l = args[2];\n        var r,g,b;\n        if (s === 0) {\n            r = g = b = l*255;\n        } else {\n            var t3 = [0,0,0];\n            var c = [0,0,0];\n            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;\n            var t1 = 2 * l - t2;\n            var h_ = h / 360;\n            t3[0] = h_ + 1/3;\n            t3[1] = h_;\n            t3[2] = h_ - 1/3;\n            for (var i=0; i<3; i++) {\n                if (t3[i] < 0) { t3[i] += 1; }\n                if (t3[i] > 1) { t3[i] -= 1; }\n                if (6 * t3[i] < 1)\n                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }\n                else if (2 * t3[i] < 1)\n                    { c[i] = t2; }\n                else if (3 * t3[i] < 2)\n                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }\n                else\n                    { c[i] = t1; }\n            }\n            (assign = [round$5(c[0]*255),round$5(c[1]*255),round$5(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);\n        }\n        if (args.length > 3) {\n            // keep alpha channel\n            return [r,g,b,args[3]];\n        }\n        return [r,g,b,1];\n    };\n\n    var hsl2rgb_1 = hsl2rgb$1;\n\n    var hsl2rgb = hsl2rgb_1;\n    var input$f = input$h;\n\n    var RE_RGB = /^rgb\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*\\)$/;\n    var RE_RGBA = /^rgba\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n    var RE_RGB_PCT = /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n    var RE_RGBA_PCT = /^rgba\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n    var RE_HSL = /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n    var RE_HSLA = /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\n    var round$4 = Math.round;\n\n    var css2rgb$1 = function (css) {\n        css = css.toLowerCase().trim();\n        var m;\n\n        if (input$f.format.named) {\n            try {\n                return input$f.format.named(css);\n            } catch (e) {\n                // eslint-disable-next-line\n            }\n        }\n\n        // rgb(250,20,0)\n        if ((m = css.match(RE_RGB))) {\n            var rgb = m.slice(1,4);\n            for (var i=0; i<3; i++) {\n                rgb[i] = +rgb[i];\n            }\n            rgb[3] = 1;  // default alpha\n            return rgb;\n        }\n\n        // rgba(250,20,0,0.4)\n        if ((m = css.match(RE_RGBA))) {\n            var rgb$1 = m.slice(1,5);\n            for (var i$1=0; i$1<4; i$1++) {\n                rgb$1[i$1] = +rgb$1[i$1];\n            }\n            return rgb$1;\n        }\n\n        // rgb(100%,0%,0%)\n        if ((m = css.match(RE_RGB_PCT))) {\n            var rgb$2 = m.slice(1,4);\n            for (var i$2=0; i$2<3; i$2++) {\n                rgb$2[i$2] = round$4(rgb$2[i$2] * 2.55);\n            }\n            rgb$2[3] = 1;  // default alpha\n            return rgb$2;\n        }\n\n        // rgba(100%,0%,0%,0.4)\n        if ((m = css.match(RE_RGBA_PCT))) {\n            var rgb$3 = m.slice(1,5);\n            for (var i$3=0; i$3<3; i$3++) {\n                rgb$3[i$3] = round$4(rgb$3[i$3] * 2.55);\n            }\n            rgb$3[3] = +rgb$3[3];\n            return rgb$3;\n        }\n\n        // hsl(0,100%,50%)\n        if ((m = css.match(RE_HSL))) {\n            var hsl = m.slice(1,4);\n            hsl[1] *= 0.01;\n            hsl[2] *= 0.01;\n            var rgb$4 = hsl2rgb(hsl);\n            rgb$4[3] = 1;\n            return rgb$4;\n        }\n\n        // hsla(0,100%,50%,0.5)\n        if ((m = css.match(RE_HSLA))) {\n            var hsl$1 = m.slice(1,4);\n            hsl$1[1] *= 0.01;\n            hsl$1[2] *= 0.01;\n            var rgb$5 = hsl2rgb(hsl$1);\n            rgb$5[3] = +m[4];  // default alpha = 1\n            return rgb$5;\n        }\n    };\n\n    css2rgb$1.test = function (s) {\n        return RE_RGB.test(s) ||\n            RE_RGBA.test(s) ||\n            RE_RGB_PCT.test(s) ||\n            RE_RGBA_PCT.test(s) ||\n            RE_HSL.test(s) ||\n            RE_HSLA.test(s);\n    };\n\n    var css2rgb_1 = css2rgb$1;\n\n    var chroma$i = chroma_1;\n    var Color$B = Color_1;\n    var input$e = input$h;\n    var type$k = utils.type;\n\n    var rgb2css = rgb2css_1;\n    var css2rgb = css2rgb_1;\n\n    Color$B.prototype.css = function(mode) {\n        return rgb2css(this._rgb, mode);\n    };\n\n    chroma$i.css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$B, [ null ].concat( args, ['css']) ));\n    };\n\n    input$e.format.css = css2rgb;\n\n    input$e.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$k(h) === 'string' && css2rgb.test(h)) {\n                return 'css';\n            }\n        }\n    });\n\n    var Color$A = Color_1;\n    var chroma$h = chroma_1;\n    var input$d = input$h;\n    var unpack$t = utils.unpack;\n\n    input$d.format.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack$t(args, 'rgba');\n        rgb[0] *= 255;\n        rgb[1] *= 255;\n        rgb[2] *= 255;\n        return rgb;\n    };\n\n    chroma$h.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$A, [ null ].concat( args, ['gl']) ));\n    };\n\n    Color$A.prototype.gl = function() {\n        var rgb = this._rgb;\n        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];\n    };\n\n    var unpack$s = utils.unpack;\n\n    var rgb2hcg$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$s(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n        var delta = max - min;\n        var c = delta * 100 / 255;\n        var _g = min / (255 - delta) * 100;\n        var h;\n        if (delta === 0) {\n            h = Number.NaN;\n        } else {\n            if (r === max) { h = (g - b) / delta; }\n            if (g === max) { h = 2+(b - r) / delta; }\n            if (b === max) { h = 4+(r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, c, _g];\n    };\n\n    var rgb2hcg_1 = rgb2hcg$1;\n\n    var unpack$r = utils.unpack;\n    var floor$3 = Math.floor;\n\n    /*\n     * this is basically just HSV with some minor tweaks\n     *\n     * hue.. [0..360]\n     * chroma .. [0..1]\n     * grayness .. [0..1]\n     */\n\n    var hcg2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$r(args, 'hcg');\n        var h = args[0];\n        var c = args[1];\n        var _g = args[2];\n        var r,g,b;\n        _g = _g * 255;\n        var _c = c * 255;\n        if (c === 0) {\n            r = g = b = _g;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n            var i = floor$3(h);\n            var f = h - i;\n            var p = _g * (1 - c);\n            var q = p + _c * (1 - f);\n            var t = p + _c * f;\n            var v = p + _c;\n            switch (i) {\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var hcg2rgb_1 = hcg2rgb;\n\n    var unpack$q = utils.unpack;\n    var type$j = utils.type;\n    var chroma$g = chroma_1;\n    var Color$z = Color_1;\n    var input$c = input$h;\n\n    var rgb2hcg = rgb2hcg_1;\n\n    Color$z.prototype.hcg = function() {\n        return rgb2hcg(this._rgb);\n    };\n\n    chroma$g.hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$z, [ null ].concat( args, ['hcg']) ));\n    };\n\n    input$c.format.hcg = hcg2rgb_1;\n\n    input$c.autodetect.push({\n        p: 1,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$q(args, 'hcg');\n            if (type$j(args) === 'array' && args.length === 3) {\n                return 'hcg';\n            }\n        }\n    });\n\n    var unpack$p = utils.unpack;\n    var last = utils.last;\n    var round$3 = Math.round;\n\n    var rgb2hex$2 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$p(args, 'rgba');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var a = ref[3];\n        var mode = last(args) || 'auto';\n        if (a === undefined) { a = 1; }\n        if (mode === 'auto') {\n            mode = a < 1 ? 'rgba' : 'rgb';\n        }\n        r = round$3(r);\n        g = round$3(g);\n        b = round$3(b);\n        var u = r << 16 | g << 8 | b;\n        var str = \"000000\" + u.toString(16); //#.toUpperCase();\n        str = str.substr(str.length - 6);\n        var hxa = '0' + round$3(a * 255).toString(16);\n        hxa = hxa.substr(hxa.length - 2);\n        switch (mode.toLowerCase()) {\n            case 'rgba': return (\"#\" + str + hxa);\n            case 'argb': return (\"#\" + hxa + str);\n            default: return (\"#\" + str);\n        }\n    };\n\n    var rgb2hex_1 = rgb2hex$2;\n\n    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\n    var hex2rgb$1 = function (hex) {\n        if (hex.match(RE_HEX)) {\n            // remove optional leading #\n            if (hex.length === 4 || hex.length === 7) {\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full six-digit\n            if (hex.length === 3) {\n                hex = hex.split('');\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n            }\n            var u = parseInt(hex, 16);\n            var r = u >> 16;\n            var g = u >> 8 & 0xFF;\n            var b = u & 0xFF;\n            return [r,g,b,1];\n        }\n\n        // match rgba hex format, eg #FF000077\n        if (hex.match(RE_HEXA)) {\n            if (hex.length === 5 || hex.length === 9) {\n                // remove optional leading #\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full eight-digit\n            if (hex.length === 4) {\n                hex = hex.split('');\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];\n            }\n            var u$1 = parseInt(hex, 16);\n            var r$1 = u$1 >> 24 & 0xFF;\n            var g$1 = u$1 >> 16 & 0xFF;\n            var b$1 = u$1 >> 8 & 0xFF;\n            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;\n            return [r$1,g$1,b$1,a];\n        }\n\n        // we used to check for css colors here\n        // if _input.css? and rgb = _input.css hex\n        //     return rgb\n\n        throw new Error((\"unknown hex color: \" + hex));\n    };\n\n    var hex2rgb_1 = hex2rgb$1;\n\n    var chroma$f = chroma_1;\n    var Color$y = Color_1;\n    var type$i = utils.type;\n    var input$b = input$h;\n\n    var rgb2hex$1 = rgb2hex_1;\n\n    Color$y.prototype.hex = function(mode) {\n        return rgb2hex$1(this._rgb, mode);\n    };\n\n    chroma$f.hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$y, [ null ].concat( args, ['hex']) ));\n    };\n\n    input$b.format.hex = hex2rgb_1;\n    input$b.autodetect.push({\n        p: 4,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$i(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {\n                return 'hex';\n            }\n        }\n    });\n\n    var unpack$o = utils.unpack;\n    var TWOPI$2 = utils.TWOPI;\n    var min$2 = Math.min;\n    var sqrt$4 = Math.sqrt;\n    var acos = Math.acos;\n\n    var rgb2hsi$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n        */\n        var ref = unpack$o(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var h;\n        var min_ = min$2(r,g,b);\n        var i = (r+g+b) / 3;\n        var s = i > 0 ? 1 - min_/i : 0;\n        if (s === 0) {\n            h = NaN;\n        } else {\n            h = ((r-g)+(r-b)) / 2;\n            h /= sqrt$4((r-g)*(r-g) + (r-b)*(g-b));\n            h = acos(h);\n            if (b > g) {\n                h = TWOPI$2 - h;\n            }\n            h /= TWOPI$2;\n        }\n        return [h*360,s,i];\n    };\n\n    var rgb2hsi_1 = rgb2hsi$1;\n\n    var unpack$n = utils.unpack;\n    var limit = utils.limit;\n    var TWOPI$1 = utils.TWOPI;\n    var PITHIRD = utils.PITHIRD;\n    var cos$4 = Math.cos;\n\n    /*\n     * hue [0..360]\n     * saturation [0..1]\n     * intensity [0..1]\n     */\n    var hsi2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n        */\n        args = unpack$n(args, 'hsi');\n        var h = args[0];\n        var s = args[1];\n        var i = args[2];\n        var r,g,b;\n\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(s)) { s = 0; }\n        // normalize hue\n        if (h > 360) { h -= 360; }\n        if (h < 0) { h += 360; }\n        h /= 360;\n        if (h < 1/3) {\n            b = (1-s)/3;\n            r = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;\n            g = 1 - (b+r);\n        } else if (h < 2/3) {\n            h -= 1/3;\n            r = (1-s)/3;\n            g = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;\n            b = 1 - (r+g);\n        } else {\n            h -= 2/3;\n            g = (1-s)/3;\n            b = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;\n            r = 1 - (g+b);\n        }\n        r = limit(i*r*3);\n        g = limit(i*g*3);\n        b = limit(i*b*3);\n        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];\n    };\n\n    var hsi2rgb_1 = hsi2rgb;\n\n    var unpack$m = utils.unpack;\n    var type$h = utils.type;\n    var chroma$e = chroma_1;\n    var Color$x = Color_1;\n    var input$a = input$h;\n\n    var rgb2hsi = rgb2hsi_1;\n\n    Color$x.prototype.hsi = function() {\n        return rgb2hsi(this._rgb);\n    };\n\n    chroma$e.hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$x, [ null ].concat( args, ['hsi']) ));\n    };\n\n    input$a.format.hsi = hsi2rgb_1;\n\n    input$a.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$m(args, 'hsi');\n            if (type$h(args) === 'array' && args.length === 3) {\n                return 'hsi';\n            }\n        }\n    });\n\n    var unpack$l = utils.unpack;\n    var type$g = utils.type;\n    var chroma$d = chroma_1;\n    var Color$w = Color_1;\n    var input$9 = input$h;\n\n    var rgb2hsl$1 = rgb2hsl_1;\n\n    Color$w.prototype.hsl = function() {\n        return rgb2hsl$1(this._rgb);\n    };\n\n    chroma$d.hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$w, [ null ].concat( args, ['hsl']) ));\n    };\n\n    input$9.format.hsl = hsl2rgb_1;\n\n    input$9.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$l(args, 'hsl');\n            if (type$g(args) === 'array' && args.length === 3) {\n                return 'hsl';\n            }\n        }\n    });\n\n    var unpack$k = utils.unpack;\n    var min$1 = Math.min;\n    var max$1 = Math.max;\n\n    /*\n     * supported arguments:\n     * - rgb2hsv(r,g,b)\n     * - rgb2hsv([r,g,b])\n     * - rgb2hsv({r,g,b})\n     */\n    var rgb2hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$k(args, 'rgb');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n        var min_ = min$1(r, g, b);\n        var max_ = max$1(r, g, b);\n        var delta = max_ - min_;\n        var h,s,v;\n        v = max_ / 255.0;\n        if (max_ === 0) {\n            h = Number.NaN;\n            s = 0;\n        } else {\n            s = delta / max_;\n            if (r === max_) { h = (g - b) / delta; }\n            if (g === max_) { h = 2+(b - r) / delta; }\n            if (b === max_) { h = 4+(r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, s, v]\n    };\n\n    var rgb2hsv$1 = rgb2hsl;\n\n    var unpack$j = utils.unpack;\n    var floor$2 = Math.floor;\n\n    var hsv2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$j(args, 'hsv');\n        var h = args[0];\n        var s = args[1];\n        var v = args[2];\n        var r,g,b;\n        v *= 255;\n        if (s === 0) {\n            r = g = b = v;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n\n            var i = floor$2(h);\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n\n            switch (i) {\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\n            }\n        }\n        return [r,g,b,args.length > 3?args[3]:1];\n    };\n\n    var hsv2rgb_1 = hsv2rgb;\n\n    var unpack$i = utils.unpack;\n    var type$f = utils.type;\n    var chroma$c = chroma_1;\n    var Color$v = Color_1;\n    var input$8 = input$h;\n\n    var rgb2hsv = rgb2hsv$1;\n\n    Color$v.prototype.hsv = function() {\n        return rgb2hsv(this._rgb);\n    };\n\n    chroma$c.hsv = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$v, [ null ].concat( args, ['hsv']) ));\n    };\n\n    input$8.format.hsv = hsv2rgb_1;\n\n    input$8.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$i(args, 'hsv');\n            if (type$f(args) === 'array' && args.length === 3) {\n                return 'hsv';\n            }\n        }\n    });\n\n    var labConstants = {\n        // Corresponds roughly to RGB brighter/darker\n        Kn: 18,\n\n        // D65 standard referent\n        Xn: 0.950470,\n        Yn: 1,\n        Zn: 1.088830,\n\n        t0: 0.137931034,  // 4 / 29\n        t1: 0.206896552,  // 6 / 29\n        t2: 0.12841855,   // 3 * t1 * t1\n        t3: 0.008856452,  // t1 * t1 * t1\n    };\n\n    var LAB_CONSTANTS$3 = labConstants;\n    var unpack$h = utils.unpack;\n    var pow$a = Math.pow;\n\n    var rgb2lab$2 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$h(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2xyz(r,g,b);\n        var x = ref$1[0];\n        var y = ref$1[1];\n        var z = ref$1[2];\n        var l = 116 * y - 16;\n        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];\n    };\n\n    var rgb_xyz = function (r) {\n        if ((r /= 255) <= 0.04045) { return r / 12.92; }\n        return pow$a((r + 0.055) / 1.055, 2.4);\n    };\n\n    var xyz_lab = function (t) {\n        if (t > LAB_CONSTANTS$3.t3) { return pow$a(t, 1 / 3); }\n        return t / LAB_CONSTANTS$3.t2 + LAB_CONSTANTS$3.t0;\n    };\n\n    var rgb2xyz = function (r,g,b) {\n        r = rgb_xyz(r);\n        g = rgb_xyz(g);\n        b = rgb_xyz(b);\n        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS$3.Xn);\n        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS$3.Yn);\n        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS$3.Zn);\n        return [x,y,z];\n    };\n\n    var rgb2lab_1 = rgb2lab$2;\n\n    var LAB_CONSTANTS$2 = labConstants;\n    var unpack$g = utils.unpack;\n    var pow$9 = Math.pow;\n\n    /*\n     * L* [0..100]\n     * a [-100..100]\n     * b [-100..100]\n     */\n    var lab2rgb$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$g(args, 'lab');\n        var l = args[0];\n        var a = args[1];\n        var b = args[2];\n        var x,y,z, r,g,b_;\n\n        y = (l + 16) / 116;\n        x = isNaN(a) ? y : y + a / 500;\n        z = isNaN(b) ? y : y - b / 200;\n\n        y = LAB_CONSTANTS$2.Yn * lab_xyz(y);\n        x = LAB_CONSTANTS$2.Xn * lab_xyz(x);\n        z = LAB_CONSTANTS$2.Zn * lab_xyz(z);\n\n        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB\n        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n\n        return [r,g,b_,args.length > 3 ? args[3] : 1];\n    };\n\n    var xyz_rgb = function (r) {\n        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$9(r, 1 / 2.4) - 0.055)\n    };\n\n    var lab_xyz = function (t) {\n        return t > LAB_CONSTANTS$2.t1 ? t * t * t : LAB_CONSTANTS$2.t2 * (t - LAB_CONSTANTS$2.t0)\n    };\n\n    var lab2rgb_1 = lab2rgb$1;\n\n    var unpack$f = utils.unpack;\n    var type$e = utils.type;\n    var chroma$b = chroma_1;\n    var Color$u = Color_1;\n    var input$7 = input$h;\n\n    var rgb2lab$1 = rgb2lab_1;\n\n    Color$u.prototype.lab = function() {\n        return rgb2lab$1(this._rgb);\n    };\n\n    chroma$b.lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$u, [ null ].concat( args, ['lab']) ));\n    };\n\n    input$7.format.lab = lab2rgb_1;\n\n    input$7.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$f(args, 'lab');\n            if (type$e(args) === 'array' && args.length === 3) {\n                return 'lab';\n            }\n        }\n    });\n\n    var unpack$e = utils.unpack;\n    var RAD2DEG = utils.RAD2DEG;\n    var sqrt$3 = Math.sqrt;\n    var atan2$2 = Math.atan2;\n    var round$2 = Math.round;\n\n    var lab2lch$2 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$e(args, 'lab');\n        var l = ref[0];\n        var a = ref[1];\n        var b = ref[2];\n        var c = sqrt$3(a * a + b * b);\n        var h = (atan2$2(b, a) * RAD2DEG + 360) % 360;\n        if (round$2(c*10000) === 0) { h = Number.NaN; }\n        return [l, c, h];\n    };\n\n    var lab2lch_1 = lab2lch$2;\n\n    var unpack$d = utils.unpack;\n    var rgb2lab = rgb2lab_1;\n    var lab2lch$1 = lab2lch_1;\n\n    var rgb2lch$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$d(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2lab(r,g,b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        return lab2lch$1(l,a,b_);\n    };\n\n    var rgb2lch_1 = rgb2lch$1;\n\n    var unpack$c = utils.unpack;\n    var DEG2RAD = utils.DEG2RAD;\n    var sin$3 = Math.sin;\n    var cos$3 = Math.cos;\n\n    var lch2lab$2 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n        These formulas were invented by David Dalrymple to obtain maximum contrast without going\n        out of gamut if the parameters are in the range 0-1.\n\n        A saturation multiplier was added by Gregor Aisch\n        */\n        var ref = unpack$c(args, 'lch');\n        var l = ref[0];\n        var c = ref[1];\n        var h = ref[2];\n        if (isNaN(h)) { h = 0; }\n        h = h * DEG2RAD;\n        return [l, cos$3(h) * c, sin$3(h) * c]\n    };\n\n    var lch2lab_1 = lch2lab$2;\n\n    var unpack$b = utils.unpack;\n    var lch2lab$1 = lch2lab_1;\n    var lab2rgb = lab2rgb_1;\n\n    var lch2rgb$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$b(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var ref = lch2lab$1 (l,c,h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = lab2rgb (L,a,b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var lch2rgb_1 = lch2rgb$1;\n\n    var unpack$a = utils.unpack;\n    var lch2rgb = lch2rgb_1;\n\n    var hcl2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hcl = unpack$a(args, 'hcl').reverse();\n        return lch2rgb.apply(void 0, hcl);\n    };\n\n    var hcl2rgb_1 = hcl2rgb;\n\n    var unpack$9 = utils.unpack;\n    var type$d = utils.type;\n    var chroma$a = chroma_1;\n    var Color$t = Color_1;\n    var input$6 = input$h;\n\n    var rgb2lch = rgb2lch_1;\n\n    Color$t.prototype.lch = function() { return rgb2lch(this._rgb); };\n    Color$t.prototype.hcl = function() { return rgb2lch(this._rgb).reverse(); };\n\n    chroma$a.lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$t, [ null ].concat( args, ['lch']) ));\n    };\n    chroma$a.hcl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$t, [ null ].concat( args, ['hcl']) ));\n    };\n\n    input$6.format.lch = lch2rgb_1;\n    input$6.format.hcl = hcl2rgb_1;\n\n    ['lch','hcl'].forEach(function (m) { return input$6.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$9(args, m);\n            if (type$d(args) === 'array' && args.length === 3) {\n                return m;\n            }\n        }\n    }); });\n\n    /**\n    \tX11 color names\n\n    \thttp://www.w3.org/TR/css3-color/#svg-color\n    */\n\n    var w3cx11$1 = {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflower: '#6495ed',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkgrey: '#a9a9a9',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkslategrey: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        grey: '#808080',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        indianred: '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        laserlemon: '#ffff54',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrod: '#fafad2',\n        lightgoldenrodyellow: '#fafad2',\n        lightgray: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightgrey: '#d3d3d3',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        maroon2: '#7f0000',\n        maroon3: '#b03060',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370db',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#db7093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        purple2: '#7f007f',\n        purple3: '#a020f0',\n        rebeccapurple: '#663399',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32'\n    };\n\n    var w3cx11_1 = w3cx11$1;\n\n    var Color$s = Color_1;\n    var input$5 = input$h;\n    var type$c = utils.type;\n\n    var w3cx11 = w3cx11_1;\n    var hex2rgb = hex2rgb_1;\n    var rgb2hex = rgb2hex_1;\n\n    Color$s.prototype.name = function() {\n        var hex = rgb2hex(this._rgb, 'rgb');\n        for (var i = 0, list = Object.keys(w3cx11); i < list.length; i += 1) {\n            var n = list[i];\n\n            if (w3cx11[n] === hex) { return n.toLowerCase(); }\n        }\n        return hex;\n    };\n\n    input$5.format.named = function (name) {\n        name = name.toLowerCase();\n        if (w3cx11[name]) { return hex2rgb(w3cx11[name]); }\n        throw new Error('unknown color name: '+name);\n    };\n\n    input$5.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$c(h) === 'string' && w3cx11[h.toLowerCase()]) {\n                return 'named';\n            }\n        }\n    });\n\n    var unpack$8 = utils.unpack;\n\n    var rgb2num$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$8(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        return (r << 16) + (g << 8) + b;\n    };\n\n    var rgb2num_1 = rgb2num$1;\n\n    var type$b = utils.type;\n\n    var num2rgb = function (num) {\n        if (type$b(num) == \"number\" && num >= 0 && num <= 0xFFFFFF) {\n            var r = num >> 16;\n            var g = (num >> 8) & 0xFF;\n            var b = num & 0xFF;\n            return [r,g,b,1];\n        }\n        throw new Error(\"unknown num color: \"+num);\n    };\n\n    var num2rgb_1 = num2rgb;\n\n    var chroma$9 = chroma_1;\n    var Color$r = Color_1;\n    var input$4 = input$h;\n    var type$a = utils.type;\n\n    var rgb2num = rgb2num_1;\n\n    Color$r.prototype.num = function() {\n        return rgb2num(this._rgb);\n    };\n\n    chroma$9.num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$r, [ null ].concat( args, ['num']) ));\n    };\n\n    input$4.format.num = num2rgb_1;\n\n    input$4.autodetect.push({\n        p: 5,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            if (args.length === 1 && type$a(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {\n                return 'num';\n            }\n        }\n    });\n\n    var chroma$8 = chroma_1;\n    var Color$q = Color_1;\n    var input$3 = input$h;\n    var unpack$7 = utils.unpack;\n    var type$9 = utils.type;\n    var round$1 = Math.round;\n\n    Color$q.prototype.rgb = function(rnd) {\n        if ( rnd === void 0 ) rnd=true;\n\n        if (rnd === false) { return this._rgb.slice(0,3); }\n        return this._rgb.slice(0,3).map(round$1);\n    };\n\n    Color$q.prototype.rgba = function(rnd) {\n        if ( rnd === void 0 ) rnd=true;\n\n        return this._rgb.slice(0,4).map(function (v,i) {\n            return i<3 ? (rnd === false ? v : round$1(v)) : v;\n        });\n    };\n\n    chroma$8.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$q, [ null ].concat( args, ['rgb']) ));\n    };\n\n    input$3.format.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack$7(args, 'rgba');\n        if (rgba[3] === undefined) { rgba[3] = 1; }\n        return rgba;\n    };\n\n    input$3.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$7(args, 'rgba');\n            if (type$9(args) === 'array' && (args.length === 3 ||\n                args.length === 4 && type$9(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {\n                return 'rgb';\n            }\n        }\n    });\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     */\n\n    var log$1 = Math.log;\n\n    var temperature2rgb$1 = function (kelvin) {\n        var temp = kelvin / 100;\n        var r,g,b;\n        if (temp < 66) {\n            r = 255;\n            g = temp < 6 ? 0 : -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log$1(g);\n            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log$1(b);\n        } else {\n            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log$1(r);\n            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log$1(g);\n            b = 255;\n        }\n        return [r,g,b,1];\n    };\n\n    var temperature2rgb_1 = temperature2rgb$1;\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     **/\n\n    var temperature2rgb = temperature2rgb_1;\n    var unpack$6 = utils.unpack;\n    var round = Math.round;\n\n    var rgb2temperature$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack$6(args, 'rgb');\n        var r = rgb[0], b = rgb[2];\n        var minTemp = 1000;\n        var maxTemp = 40000;\n        var eps = 0.4;\n        var temp;\n        while (maxTemp - minTemp > eps) {\n            temp = (maxTemp + minTemp) * 0.5;\n            var rgb$1 = temperature2rgb(temp);\n            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {\n                maxTemp = temp;\n            } else {\n                minTemp = temp;\n            }\n        }\n        return round(temp);\n    };\n\n    var rgb2temperature_1 = rgb2temperature$1;\n\n    var chroma$7 = chroma_1;\n    var Color$p = Color_1;\n    var input$2 = input$h;\n\n    var rgb2temperature = rgb2temperature_1;\n\n    Color$p.prototype.temp =\n    Color$p.prototype.kelvin =\n    Color$p.prototype.temperature = function() {\n        return rgb2temperature(this._rgb);\n    };\n\n    chroma$7.temp =\n    chroma$7.kelvin =\n    chroma$7.temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$p, [ null ].concat( args, ['temp']) ));\n    };\n\n    input$2.format.temp =\n    input$2.format.kelvin =\n    input$2.format.temperature = temperature2rgb_1;\n\n    var unpack$5 = utils.unpack;\n    var cbrt = Math.cbrt;\n    var pow$8 = Math.pow;\n    var sign$1 = Math.sign;\n\n    var rgb2oklab$2 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        // OKLab color space implementation taken from\n        // https://bottosson.github.io/posts/oklab/\n        var ref = unpack$5(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = [rgb2lrgb(r / 255), rgb2lrgb(g / 255), rgb2lrgb(b / 255)];\n        var lr = ref$1[0];\n        var lg = ref$1[1];\n        var lb = ref$1[2];\n        var l = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);\n        var m = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);\n        var s = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);\n\n        return [\n            0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,\n            1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,\n            0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s\n        ];\n    };\n\n    var rgb2oklab_1 = rgb2oklab$2;\n\n    function rgb2lrgb(c) {\n        var abs = Math.abs(c);\n        if (abs < 0.04045) {\n            return c / 12.92;\n        }\n        return (sign$1(c) || 1) * pow$8((abs + 0.055) / 1.055, 2.4);\n    }\n\n    var unpack$4 = utils.unpack;\n    var pow$7 = Math.pow;\n    var sign = Math.sign;\n\n    /*\n     * L* [0..100]\n     * a [-100..100]\n     * b [-100..100]\n     */\n    var oklab2rgb$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$4(args, 'lab');\n        var L = args[0];\n        var a = args[1];\n        var b = args[2];\n\n        var l = pow$7(L + 0.3963377774 * a + 0.2158037573 * b, 3);\n        var m = pow$7(L - 0.1055613458 * a - 0.0638541728 * b, 3);\n        var s = pow$7(L - 0.0894841775 * a - 1.291485548 * b, 3);\n\n        return [\n            255 * lrgb2rgb(+4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s),\n            255 * lrgb2rgb(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s),\n            255 * lrgb2rgb(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s),\n            args.length > 3 ? args[3] : 1\n        ];\n    };\n\n    var oklab2rgb_1 = oklab2rgb$1;\n\n    function lrgb2rgb(c) {\n        var abs = Math.abs(c);\n        if (abs > 0.0031308) {\n            return (sign(c) || 1) * (1.055 * pow$7(abs, 1 / 2.4) - 0.055);\n        }\n        return c * 12.92;\n    }\n\n    var unpack$3 = utils.unpack;\n    var type$8 = utils.type;\n    var chroma$6 = chroma_1;\n    var Color$o = Color_1;\n    var input$1 = input$h;\n\n    var rgb2oklab$1 = rgb2oklab_1;\n\n    Color$o.prototype.oklab = function () {\n        return rgb2oklab$1(this._rgb);\n    };\n\n    chroma$6.oklab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$o, [ null ].concat( args, ['oklab']) ));\n    };\n\n    input$1.format.oklab = oklab2rgb_1;\n\n    input$1.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$3(args, 'oklab');\n            if (type$8(args) === 'array' && args.length === 3) {\n                return 'oklab';\n            }\n        }\n    });\n\n    var unpack$2 = utils.unpack;\n    var rgb2oklab = rgb2oklab_1;\n    var lab2lch = lab2lch_1;\n\n    var rgb2oklch$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$2(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2oklab(r, g, b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        return lab2lch(l, a, b_);\n    };\n\n    var rgb2oklch_1 = rgb2oklch$1;\n\n    var unpack$1 = utils.unpack;\n    var lch2lab = lch2lab_1;\n    var oklab2rgb = oklab2rgb_1;\n\n    var oklch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$1(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var ref = lch2lab(l, c, h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = oklab2rgb(L, a, b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var oklch2rgb_1 = oklch2rgb;\n\n    var unpack = utils.unpack;\n    var type$7 = utils.type;\n    var chroma$5 = chroma_1;\n    var Color$n = Color_1;\n    var input = input$h;\n\n    var rgb2oklch = rgb2oklch_1;\n\n    Color$n.prototype.oklch = function () {\n        return rgb2oklch(this._rgb);\n    };\n\n    chroma$5.oklch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color$n, [ null ].concat( args, ['oklch']) ));\n    };\n\n    input.format.oklch = oklch2rgb_1;\n\n    input.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'oklch');\n            if (type$7(args) === 'array' && args.length === 3) {\n                return 'oklch';\n            }\n        }\n    });\n\n    var Color$m = Color_1;\n    var type$6 = utils.type;\n\n    Color$m.prototype.alpha = function(a, mutate) {\n        if ( mutate === void 0 ) mutate=false;\n\n        if (a !== undefined && type$6(a) === 'number') {\n            if (mutate) {\n                this._rgb[3] = a;\n                return this;\n            }\n            return new Color$m([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n        }\n        return this._rgb[3];\n    };\n\n    var Color$l = Color_1;\n\n    Color$l.prototype.clipped = function() {\n        return this._rgb._clipped || false;\n    };\n\n    var Color$k = Color_1;\n    var LAB_CONSTANTS$1 = labConstants;\n\n    Color$k.prototype.darken = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \tvar me = this;\n    \tvar lab = me.lab();\n    \tlab[0] -= LAB_CONSTANTS$1.Kn * amount;\n    \treturn new Color$k(lab, 'lab').alpha(me.alpha(), true);\n    };\n\n    Color$k.prototype.brighten = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \treturn this.darken(-amount);\n    };\n\n    Color$k.prototype.darker = Color$k.prototype.darken;\n    Color$k.prototype.brighter = Color$k.prototype.brighten;\n\n    var Color$j = Color_1;\n\n    Color$j.prototype.get = function (mc) {\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n            if (i > -1) { return src[i]; }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var Color$i = Color_1;\n    var type$5 = utils.type;\n    var pow$6 = Math.pow;\n\n    var EPS = 1e-7;\n    var MAX_ITER = 20;\n\n    Color$i.prototype.luminance = function(lum) {\n        if (lum !== undefined && type$5(lum) === 'number') {\n            if (lum === 0) {\n                // return pure black\n                return new Color$i([0,0,0,this._rgb[3]], 'rgb');\n            }\n            if (lum === 1) {\n                // return pure white\n                return new Color$i([255,255,255,this._rgb[3]], 'rgb');\n            }\n            // compute new color using...\n            var cur_lum = this.luminance();\n            var mode = 'rgb';\n            var max_iter = MAX_ITER;\n\n            var test = function (low, high) {\n                var mid = low.interpolate(high, 0.5, mode);\n                var lm = mid.luminance();\n                if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                    // close enough\n                    return mid;\n                }\n                return lm > lum ? test(low, mid) : test(mid, high);\n            };\n\n            var rgb = (cur_lum > lum ? test(new Color$i([0,0,0]), this) : test(this, new Color$i([255,255,255]))).rgb();\n            return new Color$i(rgb.concat( [this._rgb[3]]));\n        }\n        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));\n    };\n\n\n    var rgb2luminance = function (r,g,b) {\n        // relative luminance\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        r = luminance_x(r);\n        g = luminance_x(g);\n        b = luminance_x(b);\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    };\n\n    var luminance_x = function (x) {\n        x /= 255;\n        return x <= 0.03928 ? x/12.92 : pow$6((x+0.055)/1.055, 2.4);\n    };\n\n    var interpolator$1 = {};\n\n    var Color$h = Color_1;\n    var type$4 = utils.type;\n    var interpolator = interpolator$1;\n\n    var mix$1 = function (col1, col2, f) {\n        if ( f === void 0 ) f=0.5;\n        var rest = [], len = arguments.length - 3;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];\n\n        var mode = rest[0] || 'lrgb';\n        if (!interpolator[mode] && !rest.length) {\n            // fall back to the first supported mode\n            mode = Object.keys(interpolator)[0];\n        }\n        if (!interpolator[mode]) {\n            throw new Error((\"interpolation mode \" + mode + \" is not defined\"));\n        }\n        if (type$4(col1) !== 'object') { col1 = new Color$h(col1); }\n        if (type$4(col2) !== 'object') { col2 = new Color$h(col2); }\n        return interpolator[mode](col1, col2, f)\n            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n    };\n\n    var Color$g = Color_1;\n    var mix = mix$1;\n\n    Color$g.prototype.mix =\n    Color$g.prototype.interpolate = function(col2, f) {\n    \tif ( f === void 0 ) f=0.5;\n    \tvar rest = [], len = arguments.length - 2;\n    \twhile ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];\n\n    \treturn mix.apply(void 0, [ this, col2, f ].concat( rest ));\n    };\n\n    var Color$f = Color_1;\n\n    Color$f.prototype.premultiply = function(mutate) {\n    \tif ( mutate === void 0 ) mutate=false;\n\n    \tvar rgb = this._rgb;\n    \tvar a = rgb[3];\n    \tif (mutate) {\n    \t\tthis._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];\n    \t\treturn this;\n    \t} else {\n    \t\treturn new Color$f([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');\n    \t}\n    };\n\n    var Color$e = Color_1;\n    var LAB_CONSTANTS = labConstants;\n\n    Color$e.prototype.saturate = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \tvar me = this;\n    \tvar lch = me.lch();\n    \tlch[1] += LAB_CONSTANTS.Kn * amount;\n    \tif (lch[1] < 0) { lch[1] = 0; }\n    \treturn new Color$e(lch, 'lch').alpha(me.alpha(), true);\n    };\n\n    Color$e.prototype.desaturate = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \treturn this.saturate(-amount);\n    };\n\n    var Color$d = Color_1;\n    var type$3 = utils.type;\n\n    Color$d.prototype.set = function (mc, value, mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n            if (i > -1) {\n                if (type$3(value) == 'string') {\n                    switch (value.charAt(0)) {\n                        case '+':\n                            src[i] += +value;\n                            break;\n                        case '-':\n                            src[i] += +value;\n                            break;\n                        case '*':\n                            src[i] *= +value.substr(1);\n                            break;\n                        case '/':\n                            src[i] /= +value.substr(1);\n                            break;\n                        default:\n                            src[i] = +value;\n                    }\n                } else if (type$3(value) === 'number') {\n                    src[i] = value;\n                } else {\n                    throw new Error(\"unsupported value for Color.set\");\n                }\n                var out = new Color$d(src, mode);\n                if (mutate) {\n                    this._rgb = out._rgb;\n                    return this;\n                }\n                return out;\n            }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var Color$c = Color_1;\n\n    var rgb = function (col1, col2, f) {\n        var xyz0 = col1._rgb;\n        var xyz1 = col2._rgb;\n        return new Color$c(\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\n            'rgb'\n        )\n    };\n\n    // register interpolator\n    interpolator$1.rgb = rgb;\n\n    var Color$b = Color_1;\n    var sqrt$2 = Math.sqrt;\n    var pow$5 = Math.pow;\n\n    var lrgb = function (col1, col2, f) {\n        var ref = col1._rgb;\n        var x1 = ref[0];\n        var y1 = ref[1];\n        var z1 = ref[2];\n        var ref$1 = col2._rgb;\n        var x2 = ref$1[0];\n        var y2 = ref$1[1];\n        var z2 = ref$1[2];\n        return new Color$b(\n            sqrt$2(pow$5(x1,2) * (1-f) + pow$5(x2,2) * f),\n            sqrt$2(pow$5(y1,2) * (1-f) + pow$5(y2,2) * f),\n            sqrt$2(pow$5(z1,2) * (1-f) + pow$5(z2,2) * f),\n            'rgb'\n        )\n    };\n\n    // register interpolator\n    interpolator$1.lrgb = lrgb;\n\n    var Color$a = Color_1;\n\n    var lab = function (col1, col2, f) {\n        var xyz0 = col1.lab();\n        var xyz1 = col2.lab();\n        return new Color$a(\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\n            'lab'\n        )\n    };\n\n    // register interpolator\n    interpolator$1.lab = lab;\n\n    var Color$9 = Color_1;\n\n    var _hsx = function (col1, col2, f, m) {\n        var assign, assign$1;\n\n        var xyz0, xyz1;\n        if (m === 'hsl') {\n            xyz0 = col1.hsl();\n            xyz1 = col2.hsl();\n        } else if (m === 'hsv') {\n            xyz0 = col1.hsv();\n            xyz1 = col2.hsv();\n        } else if (m === 'hcg') {\n            xyz0 = col1.hcg();\n            xyz1 = col2.hcg();\n        } else if (m === 'hsi') {\n            xyz0 = col1.hsi();\n            xyz1 = col2.hsi();\n        } else if (m === 'lch' || m === 'hcl') {\n            m = 'hcl';\n            xyz0 = col1.hcl();\n            xyz1 = col2.hcl();\n        } else if (m === 'oklch') {\n            xyz0 = col1.oklch().reverse();\n            xyz1 = col2.oklch().reverse();\n        }\n\n        var hue0, hue1, sat0, sat1, lbv0, lbv1;\n        if (m.substr(0, 1) === 'h' || m === 'oklch') {\n            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);\n            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);\n        }\n\n        var sat, hue, lbv, dh;\n\n        if (!isNaN(hue0) && !isNaN(hue1)) {\n            // both colors have hue\n            if (hue1 > hue0 && hue1 - hue0 > 180) {\n                dh = hue1 - (hue0 + 360);\n            } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n                dh = hue1 + 360 - hue0;\n            } else {\n                dh = hue1 - hue0;\n            }\n            hue = hue0 + f * dh;\n        } else if (!isNaN(hue0)) {\n            hue = hue0;\n            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }\n        } else if (!isNaN(hue1)) {\n            hue = hue1;\n            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }\n        } else {\n            hue = Number.NaN;\n        }\n\n        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }\n        lbv = lbv0 + f * (lbv1 - lbv0);\n        return m === 'oklch' ? new Color$9([lbv, sat, hue], m) : new Color$9([hue, sat, lbv], m);\n    };\n\n    var interpolate_hsx$5 = _hsx;\n\n    var lch = function (col1, col2, f) {\n    \treturn interpolate_hsx$5(col1, col2, f, 'lch');\n    };\n\n    // register interpolator\n    interpolator$1.lch = lch;\n    interpolator$1.hcl = lch;\n\n    var Color$8 = Color_1;\n\n    var num = function (col1, col2, f) {\n        var c1 = col1.num();\n        var c2 = col2.num();\n        return new Color$8(c1 + f * (c2-c1), 'num')\n    };\n\n    // register interpolator\n    interpolator$1.num = num;\n\n    var interpolate_hsx$4 = _hsx;\n\n    var hcg = function (col1, col2, f) {\n    \treturn interpolate_hsx$4(col1, col2, f, 'hcg');\n    };\n\n    // register interpolator\n    interpolator$1.hcg = hcg;\n\n    var interpolate_hsx$3 = _hsx;\n\n    var hsi = function (col1, col2, f) {\n    \treturn interpolate_hsx$3(col1, col2, f, 'hsi');\n    };\n\n    // register interpolator\n    interpolator$1.hsi = hsi;\n\n    var interpolate_hsx$2 = _hsx;\n\n    var hsl = function (col1, col2, f) {\n    \treturn interpolate_hsx$2(col1, col2, f, 'hsl');\n    };\n\n    // register interpolator\n    interpolator$1.hsl = hsl;\n\n    var interpolate_hsx$1 = _hsx;\n\n    var hsv = function (col1, col2, f) {\n    \treturn interpolate_hsx$1(col1, col2, f, 'hsv');\n    };\n\n    // register interpolator\n    interpolator$1.hsv = hsv;\n\n    var Color$7 = Color_1;\n\n    var oklab = function (col1, col2, f) {\n        var xyz0 = col1.oklab();\n        var xyz1 = col2.oklab();\n        return new Color$7(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'oklab'\n        );\n    };\n\n    // register interpolator\n    interpolator$1.oklab = oklab;\n\n    var interpolate_hsx = _hsx;\n\n    var oklch = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'oklch');\n    };\n\n    // register interpolator\n    interpolator$1.oklch = oklch;\n\n    var Color$6 = Color_1;\n    var clip_rgb$1 = utils.clip_rgb;\n    var pow$4 = Math.pow;\n    var sqrt$1 = Math.sqrt;\n    var PI$1 = Math.PI;\n    var cos$2 = Math.cos;\n    var sin$2 = Math.sin;\n    var atan2$1 = Math.atan2;\n\n    var average = function (colors, mode, weights) {\n        if ( mode === void 0 ) mode='lrgb';\n        if ( weights === void 0 ) weights=null;\n\n        var l = colors.length;\n        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }\n        // normalize weights\n        var k = l / weights.reduce(function(a, b) { return a + b; });\n        weights.forEach(function (w,i) { weights[i] *= k; });\n        // convert colors to Color objects\n        colors = colors.map(function (c) { return new Color$6(c); });\n        if (mode === 'lrgb') {\n            return _average_lrgb(colors, weights)\n        }\n        var first = colors.shift();\n        var xyz = first.get(mode);\n        var cnt = [];\n        var dx = 0;\n        var dy = 0;\n        // initial color\n        for (var i=0; i<xyz.length; i++) {\n            xyz[i] = (xyz[i] || 0) * weights[0];\n            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n                var A = xyz[i] / 180 * PI$1;\n                dx += cos$2(A) * weights[0];\n                dy += sin$2(A) * weights[0];\n            }\n        }\n\n        var alpha = first.alpha() * weights[0];\n        colors.forEach(function (c,ci) {\n            var xyz2 = c.get(mode);\n            alpha += c.alpha() * weights[ci+1];\n            for (var i=0; i<xyz.length; i++) {\n                if (!isNaN(xyz2[i])) {\n                    cnt[i] += weights[ci+1];\n                    if (mode.charAt(i) === 'h') {\n                        var A = xyz2[i] / 180 * PI$1;\n                        dx += cos$2(A) * weights[ci+1];\n                        dy += sin$2(A) * weights[ci+1];\n                    } else {\n                        xyz[i] += xyz2[i] * weights[ci+1];\n                    }\n                }\n            }\n        });\n\n        for (var i$1=0; i$1<xyz.length; i$1++) {\n            if (mode.charAt(i$1) === 'h') {\n                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;\n                while (A$1 < 0) { A$1 += 360; }\n                while (A$1 >= 360) { A$1 -= 360; }\n                xyz[i$1] = A$1;\n            } else {\n                xyz[i$1] = xyz[i$1]/cnt[i$1];\n            }\n        }\n        alpha /= l;\n        return (new Color$6(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);\n    };\n\n\n    var _average_lrgb = function (colors, weights) {\n        var l = colors.length;\n        var xyz = [0,0,0,0];\n        for (var i=0; i < colors.length; i++) {\n            var col = colors[i];\n            var f = weights[i] / l;\n            var rgb = col._rgb;\n            xyz[0] += pow$4(rgb[0],2) * f;\n            xyz[1] += pow$4(rgb[1],2) * f;\n            xyz[2] += pow$4(rgb[2],2) * f;\n            xyz[3] += rgb[3] * f;\n        }\n        xyz[0] = sqrt$1(xyz[0]);\n        xyz[1] = sqrt$1(xyz[1]);\n        xyz[2] = sqrt$1(xyz[2]);\n        if (xyz[3] > 0.9999999) { xyz[3] = 1; }\n        return new Color$6(clip_rgb$1(xyz));\n    };\n\n    // minimal multi-purpose interface\n\n    // @requires utils color analyze\n\n    var chroma$4 = chroma_1;\n    var type$2 = utils.type;\n\n    var pow$3 = Math.pow;\n\n    var scale$2 = function(colors) {\n\n        // constructor\n        var _mode = 'rgb';\n        var _nacol = chroma$4('#ccc');\n        var _spread = 0;\n        // const _fixed = false;\n        var _domain = [0, 1];\n        var _pos = [];\n        var _padding = [0,0];\n        var _classes = false;\n        var _colors = [];\n        var _out = false;\n        var _min = 0;\n        var _max = 1;\n        var _correctLightness = false;\n        var _colorCache = {};\n        var _useCache = true;\n        var _gamma = 1;\n\n        // private methods\n\n        var setColors = function(colors) {\n            colors = colors || ['#fff', '#000'];\n            if (colors && type$2(colors) === 'string' && chroma$4.brewer &&\n                chroma$4.brewer[colors.toLowerCase()]) {\n                colors = chroma$4.brewer[colors.toLowerCase()];\n            }\n            if (type$2(colors) === 'array') {\n                // handle single color\n                if (colors.length === 1) {\n                    colors = [colors[0], colors[0]];\n                }\n                // make a copy of the colors\n                colors = colors.slice(0);\n                // convert to chroma classes\n                for (var c=0; c<colors.length; c++) {\n                    colors[c] = chroma$4(colors[c]);\n                }\n                // auto-fill color position\n                _pos.length = 0;\n                for (var c$1=0; c$1<colors.length; c$1++) {\n                    _pos.push(c$1/(colors.length-1));\n                }\n            }\n            resetCache();\n            return _colors = colors;\n        };\n\n        var getClass = function(value) {\n            if (_classes != null) {\n                var n = _classes.length-1;\n                var i = 0;\n                while (i < n && value >= _classes[i]) {\n                    i++;\n                }\n                return i-1;\n            }\n            return 0;\n        };\n\n        var tMapLightness = function (t) { return t; };\n        var tMapDomain = function (t) { return t; };\n\n        // const classifyValue = function(value) {\n        //     let val = value;\n        //     if (_classes.length > 2) {\n        //         const n = _classes.length-1;\n        //         const i = getClass(value);\n        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n        //     }\n        //     return val;\n        // };\n\n        var getColor = function(val, bypassMap) {\n            var col, t;\n            if (bypassMap == null) { bypassMap = false; }\n            if (isNaN(val) || (val === null)) { return _nacol; }\n            if (!bypassMap) {\n                if (_classes && (_classes.length > 2)) {\n                    // find the class\n                    var c = getClass(val);\n                    t = c / (_classes.length-2);\n                } else if (_max !== _min) {\n                    // just interpolate between min/max\n                    t = (val - _min) / (_max - _min);\n                } else {\n                    t = 1;\n                }\n            } else {\n                t = val;\n            }\n\n            // domain map\n            t = tMapDomain(t);\n\n            if (!bypassMap) {\n                t = tMapLightness(t);  // lightness correction\n            }\n\n            if (_gamma !== 1) { t = pow$3(t, _gamma); }\n\n            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n\n            t = Math.min(1, Math.max(0, t));\n\n            var k = Math.floor(t * 10000);\n\n            if (_useCache && _colorCache[k]) {\n                col = _colorCache[k];\n            } else {\n                if (type$2(_colors) === 'array') {\n                    //for i in [0.._pos.length-1]\n                    for (var i=0; i<_pos.length; i++) {\n                        var p = _pos[i];\n                        if (t <= p) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if ((t >= p) && (i === (_pos.length-1))) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t > p && t < _pos[i+1]) {\n                            t = (t-p)/(_pos[i+1]-p);\n                            col = chroma$4.interpolate(_colors[i], _colors[i+1], t, _mode);\n                            break;\n                        }\n                    }\n                } else if (type$2(_colors) === 'function') {\n                    col = _colors(t);\n                }\n                if (_useCache) { _colorCache[k] = col; }\n            }\n            return col;\n        };\n\n        var resetCache = function () { return _colorCache = {}; };\n\n        setColors(colors);\n\n        // public interface\n\n        var f = function(v) {\n            var c = chroma$4(getColor(v));\n            if (_out && c[_out]) { return c[_out](); } else { return c; }\n        };\n\n        f.classes = function(classes) {\n            if (classes != null) {\n                if (type$2(classes) === 'array') {\n                    _classes = classes;\n                    _domain = [classes[0], classes[classes.length-1]];\n                } else {\n                    var d = chroma$4.analyze(_domain);\n                    if (classes === 0) {\n                        _classes = [d.min, d.max];\n                    } else {\n                        _classes = chroma$4.limits(d, 'e', classes);\n                    }\n                }\n                return f;\n            }\n            return _classes;\n        };\n\n\n        f.domain = function(domain) {\n            if (!arguments.length) {\n                return _domain;\n            }\n            _min = domain[0];\n            _max = domain[domain.length-1];\n            _pos = [];\n            var k = _colors.length;\n            if ((domain.length === k) && (_min !== _max)) {\n                // update positions\n                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {\n                    var d = list[i];\n\n                  _pos.push((d-_min) / (_max-_min));\n                }\n            } else {\n                for (var c=0; c<k; c++) {\n                    _pos.push(c/(k-1));\n                }\n                if (domain.length > 2) {\n                    // set domain map\n                    var tOut = domain.map(function (d,i) { return i/(domain.length-1); });\n                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });\n                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {\n                        tMapDomain = function (t) {\n                            if (t <= 0 || t >= 1) { return t; }\n                            var i = 0;\n                            while (t >= tBreaks[i+1]) { i++; }\n                            var f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);\n                            var out = tOut[i] + f * (tOut[i+1] - tOut[i]);\n                            return out;\n                        };\n                    }\n\n                }\n            }\n            _domain = [_min, _max];\n            return f;\n        };\n\n        f.mode = function(_m) {\n            if (!arguments.length) {\n                return _mode;\n            }\n            _mode = _m;\n            resetCache();\n            return f;\n        };\n\n        f.range = function(colors, _pos) {\n            setColors(colors);\n            return f;\n        };\n\n        f.out = function(_o) {\n            _out = _o;\n            return f;\n        };\n\n        f.spread = function(val) {\n            if (!arguments.length) {\n                return _spread;\n            }\n            _spread = val;\n            return f;\n        };\n\n        f.correctLightness = function(v) {\n            if (v == null) { v = true; }\n            _correctLightness = v;\n            resetCache();\n            if (_correctLightness) {\n                tMapLightness = function(t) {\n                    var L0 = getColor(0, true).lab()[0];\n                    var L1 = getColor(1, true).lab()[0];\n                    var pol = L0 > L1;\n                    var L_actual = getColor(t, true).lab()[0];\n                    var L_ideal = L0 + ((L1 - L0) * t);\n                    var L_diff = L_actual - L_ideal;\n                    var t0 = 0;\n                    var t1 = 1;\n                    var max_iter = 20;\n                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {\n                        (function() {\n                            if (pol) { L_diff *= -1; }\n                            if (L_diff < 0) {\n                                t0 = t;\n                                t += (t1 - t) * 0.5;\n                            } else {\n                                t1 = t;\n                                t += (t0 - t) * 0.5;\n                            }\n                            L_actual = getColor(t, true).lab()[0];\n                            return L_diff = L_actual - L_ideal;\n                        })();\n                    }\n                    return t;\n                };\n            } else {\n                tMapLightness = function (t) { return t; };\n            }\n            return f;\n        };\n\n        f.padding = function(p) {\n            if (p != null) {\n                if (type$2(p) === 'number') {\n                    p = [p,p];\n                }\n                _padding = p;\n                return f;\n            } else {\n                return _padding;\n            }\n        };\n\n        f.colors = function(numColors, out) {\n            // If no arguments are given, return the original colors that were provided\n            if (arguments.length < 2) { out = 'hex'; }\n            var result = [];\n\n            if (arguments.length === 0) {\n                result = _colors.slice(0);\n\n            } else if (numColors === 1) {\n                result = [f(0.5)];\n\n            } else if (numColors > 1) {\n                var dm = _domain[0];\n                var dd = _domain[1] - dm;\n                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });\n\n            } else { // returns all colors based on the defined classes\n                colors = [];\n                var samples = [];\n                if (_classes && (_classes.length > 2)) {\n                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n                        samples.push((_classes[i-1]+_classes[i])*0.5);\n                    }\n                } else {\n                    samples = _domain;\n                }\n                result = samples.map(function (v) { return f(v); });\n            }\n\n            if (chroma$4[out]) {\n                result = result.map(function (c) { return c[out](); });\n            }\n            return result;\n        };\n\n        f.cache = function(c) {\n            if (c != null) {\n                _useCache = c;\n                return f;\n            } else {\n                return _useCache;\n            }\n        };\n\n        f.gamma = function(g) {\n            if (g != null) {\n                _gamma = g;\n                return f;\n            } else {\n                return _gamma;\n            }\n        };\n\n        f.nodata = function(d) {\n            if (d != null) {\n                _nacol = chroma$4(d);\n                return f;\n            } else {\n                return _nacol;\n            }\n        };\n\n        return f;\n    };\n\n    function __range__(left, right, inclusive) {\n      var range = [];\n      var ascending = left < right;\n      var end = !inclusive ? right : ascending ? right + 1 : right - 1;\n      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n        range.push(i);\n      }\n      return range;\n    }\n\n    //\n    // interpolates between a set of colors uzing a bezier spline\n    //\n\n    // @requires utils lab\n    var Color$5 = Color_1;\n\n    var scale$1 = scale$2;\n\n    // nth row of the pascal triangle\n    var binom_row = function(n) {\n        var row = [1, 1];\n        for (var i = 1; i < n; i++) {\n            var newrow = [1];\n            for (var j = 1; j <= row.length; j++) {\n                newrow[j] = (row[j] || 0) + row[j - 1];\n            }\n            row = newrow;\n        }\n        return row;\n    };\n\n    var bezier = function(colors) {\n        var assign, assign$1, assign$2;\n\n        var I, lab0, lab1, lab2;\n        colors = colors.map(function (c) { return new Color$5(c); });\n        if (colors.length === 2) {\n            // linear interpolation\n            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));\n                return new Color$5(lab, 'lab');\n            };\n        } else if (colors.length === 3) {\n            // quadratic bezier interpolation\n            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));\n                return new Color$5(lab, 'lab');\n            };\n        } else if (colors.length === 4) {\n            // cubic bezier interpolation\n            var lab3;\n            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));\n                return new Color$5(lab, 'lab');\n            };\n        } else if (colors.length >= 5) {\n            // general case (degree n bezier)\n            var labs, row, n;\n            labs = colors.map(function (c) { return c.lab(); });\n            n = colors.length - 1;\n            row = binom_row(n);\n            I = function (t) {\n                var u = 1 - t;\n                var lab = ([0, 1, 2].map(function (i) { return labs.reduce(function (sum, el, j) { return (sum + row[j] * Math.pow( u, (n - j) ) * Math.pow( t, j ) * el[i]); }, 0); }));\n                return new Color$5(lab, 'lab');\n            };\n        } else {\n            throw new RangeError(\"No point in running bezier with only one color.\")\n        }\n        return I;\n    };\n\n    var bezier_1 = function (colors) {\n        var f = bezier(colors);\n        f.scale = function () { return scale$1(f); };\n        return f;\n    };\n\n    /*\n     * interpolates between a set of colors uzing a bezier spline\n     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n     */\n\n    var chroma$3 = chroma_1;\n\n    var blend = function (bottom, top, mode) {\n        if (!blend[mode]) {\n            throw new Error('unknown blend mode ' + mode);\n        }\n        return blend[mode](bottom, top);\n    };\n\n    var blend_f = function (f) { return function (bottom,top) {\n            var c0 = chroma$3(top).rgb();\n            var c1 = chroma$3(bottom).rgb();\n            return chroma$3.rgb(f(c0, c1));\n        }; };\n\n    var each = function (f) { return function (c0, c1) {\n            var out = [];\n            out[0] = f(c0[0], c1[0]);\n            out[1] = f(c0[1], c1[1]);\n            out[2] = f(c0[2], c1[2]);\n            return out;\n        }; };\n\n    var normal = function (a) { return a; };\n    var multiply = function (a,b) { return a * b / 255; };\n    var darken = function (a,b) { return a > b ? b : a; };\n    var lighten = function (a,b) { return a > b ? a : b; };\n    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };\n    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };\n    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };\n    var dodge = function (a,b) {\n        if (a === 255) { return 255; }\n        a = 255 * (b / 255) / (1 - a / 255);\n        return a > 255 ? 255 : a\n    };\n\n    // # add = (a,b) ->\n    // #     if (a + b > 255) then 255 else a + b\n\n    blend.normal = blend_f(each(normal));\n    blend.multiply = blend_f(each(multiply));\n    blend.screen = blend_f(each(screen));\n    blend.overlay = blend_f(each(overlay));\n    blend.darken = blend_f(each(darken));\n    blend.lighten = blend_f(each(lighten));\n    blend.dodge = blend_f(each(dodge));\n    blend.burn = blend_f(each(burn));\n    // blend.add = blend_f(each(add));\n\n    var blend_1 = blend;\n\n    // cubehelix interpolation\n    // based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n    // http://astron-soc.in/bulletin/11June/289392011.pdf\n\n    var type$1 = utils.type;\n    var clip_rgb = utils.clip_rgb;\n    var TWOPI = utils.TWOPI;\n    var pow$2 = Math.pow;\n    var sin$1 = Math.sin;\n    var cos$1 = Math.cos;\n    var chroma$2 = chroma_1;\n\n    var cubehelix = function(start, rotations, hue, gamma, lightness) {\n        if ( start === void 0 ) start=300;\n        if ( rotations === void 0 ) rotations=-1.5;\n        if ( hue === void 0 ) hue=1;\n        if ( gamma === void 0 ) gamma=1;\n        if ( lightness === void 0 ) lightness=[0,1];\n\n        var dh = 0, dl;\n        if (type$1(lightness) === 'array') {\n            dl = lightness[1] - lightness[0];\n        } else {\n            dl = 0;\n            lightness = [lightness, lightness];\n        }\n\n        var f = function(fract) {\n            var a = TWOPI * (((start+120)/360) + (rotations * fract));\n            var l = pow$2(lightness[0] + (dl * fract), gamma);\n            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;\n            var amp = (h * l * (1-l)) / 2;\n            var cos_a = cos$1(a);\n            var sin_a = sin$1(a);\n            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));\n            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));\n            var b = l + (amp * (+1.97294 * cos_a));\n            return chroma$2(clip_rgb([r*255,g*255,b*255,1]));\n        };\n\n        f.start = function(s) {\n            if ((s == null)) { return start; }\n            start = s;\n            return f;\n        };\n\n        f.rotations = function(r) {\n            if ((r == null)) { return rotations; }\n            rotations = r;\n            return f;\n        };\n\n        f.gamma = function(g) {\n            if ((g == null)) { return gamma; }\n            gamma = g;\n            return f;\n        };\n\n        f.hue = function(h) {\n            if ((h == null)) { return hue; }\n            hue = h;\n            if (type$1(hue) === 'array') {\n                dh = hue[1] - hue[0];\n                if (dh === 0) { hue = hue[1]; }\n            } else {\n                dh = 0;\n            }\n            return f;\n        };\n\n        f.lightness = function(h) {\n            if ((h == null)) { return lightness; }\n            if (type$1(h) === 'array') {\n                lightness = h;\n                dl = h[1] - h[0];\n            } else {\n                lightness = [h,h];\n                dl = 0;\n            }\n            return f;\n        };\n\n        f.scale = function () { return chroma$2.scale(f); };\n\n        f.hue(hue);\n\n        return f;\n    };\n\n    var Color$4 = Color_1;\n    var digits = '0123456789abcdef';\n\n    var floor$1 = Math.floor;\n    var random = Math.random;\n\n    var random_1 = function () {\n        var code = '#';\n        for (var i=0; i<6; i++) {\n            code += digits.charAt(floor$1(random() * 16));\n        }\n        return new Color$4(code, 'hex');\n    };\n\n    var type = type$p;\n    var log = Math.log;\n    var pow$1 = Math.pow;\n    var floor = Math.floor;\n    var abs$1 = Math.abs;\n\n\n    var analyze = function (data, key) {\n        if ( key === void 0 ) key=null;\n\n        var r = {\n            min: Number.MAX_VALUE,\n            max: Number.MAX_VALUE*-1,\n            sum: 0,\n            values: [],\n            count: 0\n        };\n        if (type(data) === 'object') {\n            data = Object.values(data);\n        }\n        data.forEach(function (val) {\n            if (key && type(val) === 'object') { val = val[key]; }\n            if (val !== undefined && val !== null && !isNaN(val)) {\n                r.values.push(val);\n                r.sum += val;\n                if (val < r.min) { r.min = val; }\n                if (val > r.max) { r.max = val; }\n                r.count += 1;\n            }\n        });\n\n        r.domain = [r.min, r.max];\n\n        r.limits = function (mode, num) { return limits(r, mode, num); };\n\n        return r;\n    };\n\n\n    var limits = function (data, mode, num) {\n        if ( mode === void 0 ) mode='equal';\n        if ( num === void 0 ) num=7;\n\n        if (type(data) == 'array') {\n            data = analyze(data);\n        }\n        var min = data.min;\n        var max = data.max;\n        var values = data.values.sort(function (a,b) { return a-b; });\n\n        if (num === 1) { return [min,max]; }\n\n        var limits = [];\n\n        if (mode.substr(0,1) === 'c') { // continuous\n            limits.push(min);\n            limits.push(max);\n        }\n\n        if (mode.substr(0,1) === 'e') { // equal interval\n            limits.push(min);\n            for (var i=1; i<num; i++) {\n                limits.push(min+((i/num)*(max-min)));\n            }\n            limits.push(max);\n        }\n\n        else if (mode.substr(0,1) === 'l') { // log scale\n            if (min <= 0) {\n                throw new Error('Logarithmic scales are only possible for values > 0');\n            }\n            var min_log = Math.LOG10E * log(min);\n            var max_log = Math.LOG10E * log(max);\n            limits.push(min);\n            for (var i$1=1; i$1<num; i$1++) {\n                limits.push(pow$1(10, min_log + ((i$1/num) * (max_log - min_log))));\n            }\n            limits.push(max);\n        }\n\n        else if (mode.substr(0,1) === 'q') { // quantile scale\n            limits.push(min);\n            for (var i$2=1; i$2<num; i$2++) {\n                var p = ((values.length-1) * i$2)/num;\n                var pb = floor(p);\n                if (pb === p) {\n                    limits.push(values[pb]);\n                } else { // p > pb\n                    var pr = p - pb;\n                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));\n                }\n            }\n            limits.push(max);\n\n        }\n\n        else if (mode.substr(0,1) === 'k') { // k-means clustering\n            /*\n            implementation based on\n            http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n            simplified for 1-d input values\n            */\n            var cluster;\n            var n = values.length;\n            var assignments = new Array(n);\n            var clusterSizes = new Array(num);\n            var repeat = true;\n            var nb_iters = 0;\n            var centroids = null;\n\n            // get seed values\n            centroids = [];\n            centroids.push(min);\n            for (var i$3=1; i$3<num; i$3++) {\n                centroids.push(min + ((i$3/num) * (max-min)));\n            }\n            centroids.push(max);\n\n            while (repeat) {\n                // assignment step\n                for (var j=0; j<num; j++) {\n                    clusterSizes[j] = 0;\n                }\n                for (var i$4=0; i$4<n; i$4++) {\n                    var value = values[i$4];\n                    var mindist = Number.MAX_VALUE;\n                    var best = (void 0);\n                    for (var j$1=0; j$1<num; j$1++) {\n                        var dist = abs$1(centroids[j$1]-value);\n                        if (dist < mindist) {\n                            mindist = dist;\n                            best = j$1;\n                        }\n                        clusterSizes[best]++;\n                        assignments[i$4] = best;\n                    }\n                }\n\n                // update centroids step\n                var newCentroids = new Array(num);\n                for (var j$2=0; j$2<num; j$2++) {\n                    newCentroids[j$2] = null;\n                }\n                for (var i$5=0; i$5<n; i$5++) {\n                    cluster = assignments[i$5];\n                    if (newCentroids[cluster] === null) {\n                        newCentroids[cluster] = values[i$5];\n                    } else {\n                        newCentroids[cluster] += values[i$5];\n                    }\n                }\n                for (var j$3=0; j$3<num; j$3++) {\n                    newCentroids[j$3] *= 1/clusterSizes[j$3];\n                }\n\n                // check convergence\n                repeat = false;\n                for (var j$4=0; j$4<num; j$4++) {\n                    if (newCentroids[j$4] !== centroids[j$4]) {\n                        repeat = true;\n                        break;\n                    }\n                }\n\n                centroids = newCentroids;\n                nb_iters++;\n\n                if (nb_iters > 200) {\n                    repeat = false;\n                }\n            }\n\n            // finished k-means clustering\n            // the next part is borrowed from gabrielflor.it\n            var kClusters = {};\n            for (var j$5=0; j$5<num; j$5++) {\n                kClusters[j$5] = [];\n            }\n            for (var i$6=0; i$6<n; i$6++) {\n                cluster = assignments[i$6];\n                kClusters[cluster].push(values[i$6]);\n            }\n            var tmpKMeansBreaks = [];\n            for (var j$6=0; j$6<num; j$6++) {\n                tmpKMeansBreaks.push(kClusters[j$6][0]);\n                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);\n            }\n            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });\n            limits.push(tmpKMeansBreaks[0]);\n            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {\n                var v = tmpKMeansBreaks[i$7];\n                if (!isNaN(v) && (limits.indexOf(v) === -1)) {\n                    limits.push(v);\n                }\n            }\n        }\n        return limits;\n    };\n\n    var analyze_1 = {analyze: analyze, limits: limits};\n\n    var Color$3 = Color_1;\n\n\n    var contrast = function (a, b) {\n        // WCAG contrast ratio\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n        a = new Color$3(a);\n        b = new Color$3(b);\n        var l1 = a.luminance();\n        var l2 = b.luminance();\n        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n    };\n\n    var Color$2 = Color_1;\n    var sqrt = Math.sqrt;\n    var pow = Math.pow;\n    var min = Math.min;\n    var max = Math.max;\n    var atan2 = Math.atan2;\n    var abs = Math.abs;\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var exp = Math.exp;\n    var PI = Math.PI;\n\n    var deltaE = function(a, b, Kl, Kc, Kh) {\n        if ( Kl === void 0 ) Kl=1;\n        if ( Kc === void 0 ) Kc=1;\n        if ( Kh === void 0 ) Kh=1;\n\n        // Delta E (CIE 2000)\n        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n        var rad2deg = function(rad) {\n            return 360 * rad / (2 * PI);\n        };\n        var deg2rad = function(deg) {\n            return (2 * PI * deg) / 360;\n        };\n        a = new Color$2(a);\n        b = new Color$2(b);\n        var ref = Array.from(a.lab());\n        var L1 = ref[0];\n        var a1 = ref[1];\n        var b1 = ref[2];\n        var ref$1 = Array.from(b.lab());\n        var L2 = ref$1[0];\n        var a2 = ref$1[1];\n        var b2 = ref$1[2];\n        var avgL = (L1 + L2)/2;\n        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n        var C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n        var avgC = (C1 + C2)/2;\n        var G = 0.5*(1-sqrt(pow(avgC, 7)/(pow(avgC, 7) + pow(25, 7))));\n        var a1p = a1*(1+G);\n        var a2p = a2*(1+G);\n        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n        var C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n        var avgCp = (C1p + C2p)/2;\n        var arctan1 = rad2deg(atan2(b1, a1p));\n        var arctan2 = rad2deg(atan2(b2, a2p));\n        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n        var avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360)/2 : (h1p + h2p)/2;\n        var T = 1 - 0.17*cos(deg2rad(avgHp - 30)) + 0.24*cos(deg2rad(2*avgHp)) + 0.32*cos(deg2rad(3*avgHp + 6)) - 0.2*cos(deg2rad(4*avgHp - 63));\n        var deltaHp = h2p - h1p;\n        deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;\n        deltaHp = 2*sqrt(C1p*C2p)*sin(deg2rad(deltaHp)/2);\n        var deltaL = L2 - L1;\n        var deltaCp = C2p - C1p;    \n        var sl = 1 + (0.015*pow(avgL - 50, 2))/sqrt(20 + pow(avgL - 50, 2));\n        var sc = 1 + 0.045*avgCp;\n        var sh = 1 + 0.015*avgCp*T;\n        var deltaTheta = 30*exp(-pow((avgHp - 275)/25, 2));\n        var Rc = 2*sqrt(pow(avgCp, 7)/(pow(avgCp, 7) + pow(25, 7)));\n        var Rt = -Rc*sin(2*deg2rad(deltaTheta));\n        var result = sqrt(pow(deltaL/(Kl*sl), 2) + pow(deltaCp/(Kc*sc), 2) + pow(deltaHp/(Kh*sh), 2) + Rt*(deltaCp/(Kc*sc))*(deltaHp/(Kh*sh)));\n        return max(0, min(100, result));\n    };\n\n    var Color$1 = Color_1;\n\n    // simple Euclidean distance\n    var distance = function(a, b, mode) {\n        if ( mode === void 0 ) mode='lab';\n\n        // Delta E (CIE 1976)\n        // see http://www.brucelindbloom.com/index.html?Equations.html\n        a = new Color$1(a);\n        b = new Color$1(b);\n        var l1 = a.get(mode);\n        var l2 = b.get(mode);\n        var sum_sq = 0;\n        for (var i in l1) {\n            var d = (l1[i] || 0) - (l2[i] || 0);\n            sum_sq += d*d;\n        }\n        return Math.sqrt(sum_sq);\n    };\n\n    var Color = Color_1;\n\n    var valid = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        try {\n            new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // some pre-defined color scales:\n    var chroma$1 = chroma_1;\n\n    var scale = scale$2;\n\n    var scales = {\n    \tcool: function cool() { return scale([chroma$1.hsl(180,1,.9), chroma$1.hsl(250,.7,.4)]) },\n    \thot: function hot() { return scale(['#000','#f00','#ff0','#fff']).mode('rgb') }\n    };\n\n    /**\n        ColorBrewer colors for chroma.js\n\n        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n        Pennsylvania State University.\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software distributed\n        under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n        CONDITIONS OF ANY KIND, either express or implied. See the License for the\n        specific language governing permissions and limitations under the License.\n    */\n\n    var colorbrewer = {\n        // sequential\n        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n        // diverging\n\n        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n        // qualitative\n\n        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],\n    };\n\n    // add lowercase aliases for case-insensitive matches\n    for (var i = 0, list = Object.keys(colorbrewer); i < list.length; i += 1) {\n        var key = list[i];\n\n        colorbrewer[key.toLowerCase()] = colorbrewer[key];\n    }\n\n    var colorbrewer_1 = colorbrewer;\n\n    var chroma = chroma_1;\n\n    // feel free to comment out anything to rollup\n    // a smaller chroma.js built\n\n    // io --> convert colors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // operators --> modify existing Colors\n\n\n\n\n\n\n\n\n\n\n    // interpolators\n\n\n\n\n\n\n\n\n\n\n\n\n    // generators -- > create new colors\n    chroma.average = average;\n    chroma.bezier = bezier_1;\n    chroma.blend = blend_1;\n    chroma.cubehelix = cubehelix;\n    chroma.mix = chroma.interpolate = mix$1;\n    chroma.random = random_1;\n    chroma.scale = scale$2;\n\n    // other utility methods\n    chroma.analyze = analyze_1.analyze;\n    chroma.contrast = contrast;\n    chroma.deltaE = deltaE;\n    chroma.distance = distance;\n    chroma.limits = analyze_1.limits;\n    chroma.valid = valid;\n\n    // scale\n    chroma.scales = scales;\n\n    // colors\n    chroma.colors = w3cx11_1;\n    chroma.brewer = colorbrewer_1;\n\n    var chroma_js = chroma;\n\n    return chroma_js;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/chroma-js/chroma.js\n// module id = 4SWg\n// module chunks = 4","module.exports = __webpack_public_path__ + \"static/media/sound.a24f99b.wav\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/audio/app07/sound.wav\n// module id = GJcV\n// module chunks = 4","require('../../modules/es6.number.is-nan');\nmodule.exports = require('../../modules/_core').Number.isNaN;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/number/is-nan.js\n// module id = K4R9\n// module chunks = 1 4","module.exports = { \"default\": require(\"core-js/library/fn/number/is-nan\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/number/is-nan.js\n// module id = MICi\n// module chunks = 1 4","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.number.is-nan.js\n// module id = NA/8\n// module chunks = 1 4","import fft from \"./js/fft\";\r\nimport Spectrogram from \"spectrogram\";\r\nimport chroma from \"chroma-js\";\r\n\r\nconst colors = function (steps) {\r\n    var baseColors = [[0, 0, 0, 1], [0, 255, 255, 1], [0, 255, 0, 1], [255, 255, 0, 1], [255, 0, 0, 1]];\r\n    var positions = [0, 0.15, 0.30, 0.50, 0.75];\r\n\r\n    var scale = new chroma.scale(baseColors, positions)\r\n        .domain([0, steps]);\r\n\r\n    var colors = [];\r\n\r\n    for (var i = 0; i < steps; ++i) {\r\n        var color = scale(i);\r\n        colors.push(color.hex());\r\n    }\r\n\r\n    return colors;\r\n}\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            soundBuffer: {}, // буфер музыки\r\n            soundMusic: false,\r\n        }\r\n    },\r\n    methods: {\r\n        getSoundBytes() {\r\n            // create the audio context (chrome only for now)\r\n            let context = new (AudioContext || webkitAudioContext)();\r\n\r\n            let request = new XMLHttpRequest();\r\n            request.open('GET', this.$refs.audio.src, true);\r\n            request.responseType = 'arraybuffer';\r\n\r\n            // When loaded decode the data\r\n            request.onload = () => {\r\n                // decode the data\r\n                context.decodeAudioData(request.response, (buffer) => {\r\n                    this.soundBuffer = buffer;\r\n                    console.log(`Buffer was installed. Sample rate = ${buffer.sampleRate}`);\r\n                }, (err) => { console.log(`Decode error: ${err}`) });\r\n            }\r\n            request.send();\r\n        },\r\n        getOriginalSpectrogram() {\r\n            let spectro = Spectrogram(this.$refs.spectrogram_original, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(this.soundBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        /****************** Группа ФНЧ ***********************/\r\n        getButterLowSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [5.979578036996447e-05, 2.989789018498223e-04, 5.979578036996447e-04, 5.979578036996447e-04, 2.989789018498223e-04, 5.979578036996447e-05],\r\n                [1, -3.984543119612337, 6.434867090275871, -5.253615170352273, 2.165132909724135, -0.359928245063557],\r\n                temp);\r\n\r\n            // строим спектрограмму\r\n            let spectro = Spectrogram(this.$refs.spectrogram_ButterLow, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby1LowSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [3.848904394060382e-06, 1.924452197030191e-05, 3.848904394060382e-05, 3.848904394060382e-05, 1.924452197030191e-05, 3.848904394060382e-06],\r\n                [1, -4.749422231925750, 9.141175457333913, -8.908980564502240, 4.395734077969244, -0.878383573934557],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby1Low, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby2LowSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.002098439541645, -0.005500606106981, 0.003463499608177, 0.003463499608177, -0.005500606106981, 0.002098439541645],\r\n                [1, -4.452396542051892, 7.956778312988316, -7.131877822880251, 3.205417066812696, -0.577798348783186],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby2Low, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getEllipLowSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.002520291023188, -0.006359925599942, 0.003967856348744, 0.003967856348744, -0.006359925599942, 0.002520291023188],\r\n                [1, -4.714020073743617, 9.022509396491165, -8.758360663832006, 4.310606501376757, -0.860478716748320],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_EllipLow, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n\r\n        /****************** Группа ФВЧ ***********************/\r\n        getButterHighSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.354164181093430, -1.770820905467149, 3.541641810934299, -3.541641810934299, 1.770820905467149, -0.354164181093430],\r\n                [1, -2.975422109745683, 3.806018119320411, -2.545252868330467, 0.881130075437837, -0.125430622155356],\r\n                temp);\r\n\r\n            // строим спектрограмму\r\n            let spectro = Spectrogram(this.$refs.spectrogram_ButterHigh, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby1HighSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.369633036012404, -1.848165180062019, 3.696330360124038, -3.696330360124038, 1.848165180062019, -0.369633036012404],\r\n                [1, -3.366529464700689, 4.444055809047855, -2.622246882044077, 0.483941252973048, 0.088516256368747],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby1High, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby2HighSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.429230046172937, -2.093304889593839, 4.135073675123997, -4.135073675123999, 2.093304889593842, -0.429230046172938],\r\n                [1, -3.241464604590933, 4.470898073127938, -3.218791536048310, 1.199825247334598, -0.184237760679781],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby2High, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getEllipHighSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.478417833484107, -2.349905423470592, 4.658451395832947, -4.658451395832950, 2.349905423470596, -0.478417833484108],\r\n                [1, -3.658429873751053, 5.345709135616499, -3.743053850209734, 1.149379226902617, -0.076977219095400],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_EllipHigh, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n\r\n        /****************** Группа Полосовых ***********************/\r\n        getButterBandSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [5.97957803867614e-05, 0, - 0.000298978901933807, 0, 0.000597957803867614, 0, - 0.000597957803867614, 0, 0.000298978901933807, 0, - 5.97957803867614e-05],\r\n                [1, - 8.10507344007186, 30.3299792306628, - 68.9102256711755, 105.182373057302, - 112.648403105060, 85.7165190081875, - 45.7659507796685, 16.4177004102881, - 3.57667441849827, 0.359928245063556],\r\n                temp);\r\n\r\n            // строим спектрограмму\r\n            let spectro = Spectrogram(this.$refs.spectrogram_ButterBand, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby1BandSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [1.94700038292630e-06, 0, - 9.73500191463151e-06, 0, 1.94700038292630e-05, 0, - 1.94700038292630e-05, 0, 9.73500191463151e-06, 0, - 1.94700038292630e-06],\r\n                [1, - 8.85099848777198, 36.2441752554191, - 90.2690293589527, 151.276786363869, - 178.146209274021, 149.269867889114, - 87.8903297960065, 34.8216327294487, - 8.39118873753563, 0.935563078000265],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby1Band, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby2BandSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                // [0.442492890490224, - 3.04225352398596, 9.13103989390295, - 14.9332592826982, 12.4305381900859, - 8.64627799649124e-15, - 12.4305381900859, 14.9332592826982, - 9.13103989390294, 3.04225352398596, - 0.442492890490223],\r\n                // [1, - 7.58289221798024, 26.3606635191759, - 55.0763690802491, 76.1113954384996, - 71.9842286913694, 46.3888200241044, - 19.4258774281009, 4.61826390331041, - 0.364136758805661, - 0.0455272240972559],\r\n                [0.0526296281466914, - 0.361842359812740, 1.08603605738460, - 1.77614578664942, 1.47847483353390, - 5.60933999480803e-16, - 1.47847483353390, 1.77614578664942, - 1.08603605738460, 0.361842359812740, - 0.0526296281466914],\r\n                [1, - 8.10553969078156, 30.3350004251610, - 68.9285188214196, 105.212022912778, - 112.662711343504, 85.6906785304712, - 45.7142262201815, 16.3762229216602, - 3.55980758863810, 0.357051385838918],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby2Band, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getEllipBandSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.00243911698139108, - 0.0166065077159646, 0.0494496435704944, - 0.0804105304591478, 0.0667057639234973, 8.23221005078355e-17, - 0.0667057639234975, 0.0804105304591479, - 0.0494496435704944, 0.0166065077159646, - 0.00243911698139108],\r\n                [1, - 8.78140946790457, 35.6891645670574, - 88.2526382394222, 146.899421445358, - 171.890481825214, 143.166870602302, - 83.8248835552702, 33.0375109646428, - 7.92266262692087, 0.879368502069890],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_EllipBand, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n\r\n        /****************** Группа Режекторных ***********************/\r\n        getButterStopSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.599940204219770, - 5.41213877001544, 22.5291446955717, - 56.8840863960223, 96.3741650759881, - 114.413877082455, 96.3741650759881, - 56.8840863960224, 22.5291446955717, - 5.41213877001545, 0.599940204219770],\r\n                [1, - 8.10507344007187, 30.3299792306628, - 68.9102256711756, 105.182373057302, - 112.648403105061, 85.7165190081876, - 45.7659507796686, 16.4177004102881, - 3.57667441849828, 0.359928245063557],\r\n                temp);\r\n\r\n            // строим спектрограмму\r\n            let spectro = Spectrogram(this.$refs.spectrogram_ButterStop, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby1StopSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.163206989883282, - 1.47231152583543, 6.12880061137268, - 15.4746763888398, 26.2175084682352, - 31.1250093728724, 26.2175084682352, - 15.4746763888398, 6.12880061137268, - 1.47231152583543, 0.163206989883282],\r\n                [1, - 7.16588129927043, 23.0032850908215, - 42.6258578720444, 48.1925410411270, - 30.2733471744090, 3.34689469985385, 11.2426101474503, - 9.92869652631222, 3.80349099662192, - 0.594992167078993],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby1Stop, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getCheby2StopSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.429230046172937, - 3.82446771524734, 15.7657611594391, - 39.5291375772088, 66.6888800194042, - 79.0604121986100, 66.6888800194041, - 39.5291375772087, 15.7657611594390, - 3.82446771524732, 0.429230046172934],\r\n                [1, - 7.43473262743321, 25.5697144344078, - 53.5928628965071, 75.8272441796704, - 75.6805399651114, 53.9621921042507, - 27.1460928769975, 9.22435397102462, - 1.91339441747386, 0.184237760679782],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby2Stop, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n        getEllipStopSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n            temp = this.filter(\r\n                [0.183192949713190, - 1.64461052439895, 6.82002961888313, - 17.1729863279001, 29.0470188747877, - 34.4652371333634, 29.0470188747877, - 17.1729863279001, 6.82002961888314, - 1.64461052439895, 0.183192949713191],\r\n                [1, - 7.23517644704466, 23.4813533683446, - 44.1201569246089, 50.9852407968192, - 33.7400583264452, 6.34635230291055, 9.40457087247389, - 9.14571803991448, 3.59038998766327, - 0.566745541391713],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_EllipStop, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n\r\n        /****************** 3 полосы ***********************/\r\n        getCheby2threeSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n\r\n            temp = this.filter(\r\n                [0.653333073641532, - 6.35281428809996, 27.9747098941242, - 73.4577001795497, 127.370134903490, - 152.375326619426, 127.370134903490, - 73.4577001795495, 27.9747098941241, - 6.35281428809993, 0.653333073641528],\r\n                [1, - 8.90045234962268, 35.8936645016793, - 86.3730376555592, 137.347779369191, - 150.812171025382, 115.806173169516, - 61.4087927588863, 21.5218945985077, - 4.50190176527483, 0.426844103617112],\r\n                temp);\r\n            temp = this.filter(\r\n                [0.653333073641532, - 4.96798366720834, 18.3689083004518, - 42.8137282857630, 69.2555965264254, - 80.9766601664281, 69.2555965264254, - 42.8137282857630, 18.3689083004518, - 4.96798366720833, 0.653333073641531],\r\n                [1, - 6.96026987386031, 23.5530049302462, - 50.2800166091317, 74.5667146365713, - 80.0214559490056, 62.8836307632659, - 35.7577957174176, 14.1254813673365, - 3.52054592295518, 0.426844103617112],\r\n                temp);\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_Cheby2three, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n\r\n        /****************** Удаление голоса ***********************/\r\n        getDeleteVoiceSpectrogram() {\r\n            let newAudioBuffer = this.cloneAudioBuffer(this.soundBuffer);\r\n\r\n            let temp = newAudioBuffer.getChannelData(0);\r\n\r\n            let temp1 = temp.slice(0);\r\n            let temp2 = temp.slice(0);\r\n\r\n            // ФНЧ\r\n            temp1 = this.filter(\r\n                [9.092865904669623e-10, 4.546432952334811e-09, 9.092865904669623e-09, 9.092865904669623e-09, 4.546432952334811e-09, 9.092865904669623e-10],\r\n                [1, -4.898337145711600, 9.598497090805598, -9.405307989195734, 4.608476358536906, -0.903328285338000],\r\n                temp1);\r\n            // ФВЧ\r\n            temp2 = this.filter(\r\n                [0.354164181093430, -1.770820905467149, 3.541641810934299, -3.541641810934299, 1.770820905467149, -0.354164181093430],\r\n                [1, -2.975422109745683, 3.806018119320411, -2.545252868330467, 0.881130075437837, -0.125430622155356],\r\n                temp2);\r\n\r\n            for (let i = 0; i < temp.length; i++) {\r\n                temp[i] = (temp1[i] + temp2[i]) / 2;\r\n            }\r\n\r\n            let spectro = Spectrogram(this.$refs.spectrogram_DeleteVoice, {\r\n                audio: {\r\n                    enable: this.soundMusic\r\n                },\r\n                canvas: {\r\n                    width: 400,\r\n                    height: 450,\r\n                },\r\n                colors: colors,\r\n            });\r\n            let audioContext = new AudioContext();\r\n            spectro.connectSource(newAudioBuffer, audioContext);\r\n            spectro.start();\r\n        },\r\n\r\n\r\n        playMusic(myArrayBuffer) {\r\n            let audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n            // Get an AudioBufferSourceNode.\r\n            // This is the AudioNode to use when we want to play an AudioBuffer\r\n            let source = audioCtx.createBufferSource();\r\n\r\n            // set the buffer in the AudioBufferSourceNode\r\n            source.buffer = myArrayBuffer;\r\n\r\n            // connect the AudioBufferSourceNode to the\r\n            // destination so we can hear the sound\r\n            source.connect(audioCtx.destination);\r\n\r\n            // start the source playing\r\n            source.start();\r\n        },\r\n        filter(b, a, array) {\r\n            let inputSignal = array.slice(0);\r\n            let sum, prevSum;\r\n\r\n            for (let n = 0; n < array.length; n++) {\r\n                prevSum = sum;\r\n                sum = 0;\r\n                for (let i = 0; i < b.length; i++) {\r\n                    if (n - i >= 0) {\r\n                        sum += b[i] * inputSignal[n - i];\r\n                    }\r\n                }\r\n                for (let i = 1; i < a.length; i++) {\r\n                    if (n - i >= 0) {\r\n                        sum -= a[i] * array[n - i];\r\n                    }\r\n                }\r\n                if (Number.isNaN(sum)) {\r\n                    console.log(n);\r\n                    console.log('Ошибка в фильтре' + prevSum);\r\n                    // return array;\r\n                    continue;\r\n                } else {\r\n                    array[n] = sum;\r\n                }\r\n            }\r\n            return array;\r\n        },\r\n        cloneAudioBuffer(buffer) {\r\n            let newBuffer = new AudioBuffer(buffer);\r\n            for (let i = 0; i < buffer.getChannelData(0).length; i++) {\r\n                newBuffer.getChannelData(0)[i] = buffer.getChannelData(0)[i];\r\n            }\r\n            return newBuffer\r\n        }\r\n    },\r\n    computed: {\r\n        lowpassFreq() {\r\n            return this.soundBuffer.sampleRate ? this.soundBuffer.sampleRate / 2 * 0.1 : false;\r\n        },\r\n        highpassFreq() {\r\n            return this.soundBuffer.sampleRate ? this.soundBuffer.sampleRate / 2 * 0.3 : false;\r\n        }\r\n    },\r\n    watch: {\r\n        soundMusic() {\r\n            localStorage.setItem('soundMusic', this.soundMusic);\r\n        }\r\n    },\r\n    mounted() {\r\n        let soundMusic = localStorage.getItem('soundMusic');\r\n        if (soundMusic != 'false') {\r\n            this.soundMusic = true;\r\n        } else {\r\n            this.soundMusic = false;\r\n        }\r\n        this.getSoundBytes();\r\n    },\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/pages/appDigital/appS07/js/appS07.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"appDigitalInit\"},[_c('div',{staticClass:\"appDigital_S07\"},[_c('h2',{staticClass:\"text-center\"},[_vm._v(\"Самостоятельная работа №7\")]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(0),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._v(\"Аудиофайл\")]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('audio',{ref:\"audio\",attrs:{\"controls\":\"\",\"src\":require('@/assets/audio/app07/sound.wav')}},[_vm._v(\"\\n            Тег audio не поддерживается вашим браузером.\\n          \")])])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(1),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_c('h4',[_vm._v(\"Спектрограмма исходного сигнала\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getOriginalSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_original\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(2),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_c('h4',[_vm._v(\"\\n            ФНЧ Баттерворта. Частота среза: \"+_vm._s(_vm.lowpassFreq)+\".\\n            \"),_c('code',[_vm._v(\"butter(5,0.1)\")])]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getButterLowSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_ButterLow\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(3),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_c('h4',[_vm._v(\"\\n            ФНЧ Чебашева 1-го рода. Частота среза: \"+_vm._s(_vm.lowpassFreq)+\".\\n            \"),_c('code',[_vm._v(\"cheby1(5,5,0.1)\")])]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby1LowSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby1Low\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(4),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_c('h4',[_vm._v(\"\\n            ФНЧ Чебышева 2-го рода. Частота среза: \"+_vm._s(_vm.lowpassFreq)+\".\\n            \"),_c('code',[_vm._v(\"cheby2(5,50,0.1)\")])]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby2LowSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby2Low\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(5),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_c('h4',[_vm._v(\"\\n            ФНЧ эллиптический. Частота среза: \"+_vm._s(_vm.lowpassFreq)+\".\\n            \"),_c('code',[_vm._v(\"ellip(5,4,50,0.1)\")])]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getEllipLowSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_EllipLow\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(6),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(7),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getButterHighSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_ButterHigh\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(8),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(9),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby1HighSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby1High\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(10),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(11),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby2HighSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby2High\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(12),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(13),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getEllipHighSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_EllipHigh\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(14),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(15),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getButterBandSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_ButterBand\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(16),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(17),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby1BandSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby1Band\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(18),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(19),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby2BandSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby2Band\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(20),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(21),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getEllipBandSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_EllipBand\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(22),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(23),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getButterStopSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_ButterStop\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(24),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(25),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby1StopSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby1Stop\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(26),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(27),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby2StopSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby2Stop\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_vm._m(28),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(29),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getEllipStopSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_EllipStop\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_c('div',{staticClass:\"step__num\"}),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(30),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getCheby2threeSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_Cheby2three\"})])])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_c('div',{staticClass:\"step__num\"}),_vm._v(\" \"),_c('div',{staticClass:\"step__content\"},[_c('div',{staticClass:\"step__descryption\"},[_vm._m(31),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-secondary btn-sm\",on:{\"click\":_vm.getDeleteVoiceSpectrogram}},[_vm._v(\"\\n            Получить спектрограмму\\n          \")])]),_vm._v(\" \"),_c('div',{staticClass:\"step__action\"},[_c('canvas',{ref:\"spectrogram_DeleteVoice\"})])])])]),_vm._v(\" \"),_c('div',{staticClass:\"position-absolute top-0 end-0 alert alert-secondary\"},[_c('span',[_vm._v(\"Воспроизводить музыку:\")]),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.soundMusic),expression:\"soundMusic\"}],attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":Array.isArray(_vm.soundMusic)?_vm._i(_vm.soundMusic,null)>-1:(_vm.soundMusic)},on:{\"change\":function($event){var $$a=_vm.soundMusic,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.soundMusic=$$a.concat([$$v]))}else{$$i>-1&&(_vm.soundMusic=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.soundMusic=$$c}}}})])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"1\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"2\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"3\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"4\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"5\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"6\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"1\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            ФВЧ Баттерворта.\\n            \"),_c('code',[_vm._v(\"butter(5,0.3,'high')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"2\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            ФВЧ Чебышева 1-го рода.\\n            \"),_c('code',[_vm._v(\"cheby1(5,5,0.1,'high')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"3\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            ФВЧ Чебышева 2-го рода.\\n            \"),_c('code',[_vm._v(\"cheby2(5,50,0.1,'high')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"4\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            ФВЧ эллиптический.\\n            \"),_c('code',[_vm._v(\"ellip(5,4,50,0.1,'high')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"1\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Полосовой Баттерворта.\\n            \"),_c('code',[_vm._v(\"butter(5,[0.1 0.2],'bandpass')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"2\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Полосовой Чебышева 1-го рода.\\n            \"),_c('code',[_vm._v(\"cheby1(5,10,[0.1 0.2],'bandpass')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"3\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Полосовой Чебышева 2-го рода.\\n            \"),_c('code',[_vm._v(\"cheby2(5,20,[0.1 0.2],'bandpass')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"4\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Полосовой эллиптический.\\n            \"),_c('code',[_vm._v(\"ellip(5,5,50,[0.1 0.2],'bandpass');\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"1\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Режекторный Баттерворта.\\n            \"),_c('code',[_vm._v(\"butter(5,[0.1 0.2],'stop')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"2\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Режекторный Чебышева 1-го рода.\\n            \"),_c('code',[_vm._v(\"cheby1(5,15,[0.1 0.2],'stop')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"3\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Режекторный Чебышева 2-го рода.\\n            \"),_c('code',[_vm._v(\"cheby2(5,50,[0.1 0.2],'stop')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"step__num\"},[_c('div',{staticClass:\"num\"},[_vm._v(\"4\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Режекторный эллиптический.\\n            \"),_c('code',[_vm._v(\"ellip(5,15,80,[0.1 0.2],'stop')\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            3 полосы пропускания, используя фильтры Чебышева 2-го рода.\\n            \"),_c('code',[_vm._v(\"\\n              cheby2(5,50,[0.05 0.1],'stop') & cheby2(5,50,[0.2 0.25],'stop')\\n            \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\"\\n            Удаление голоса, используя фильтры Чебышева 2-го рода.\\n            \"),_c('code',[_vm._v(\" butter(5,0.01) | butter(5,0.2,'high')\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-a336dff0\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/pages/appDigital/appS07/appS07.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-a336dff0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./appS07.vue\")\n}\nvar normalizeComponent = require(\"!../../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!./js/appS07.js\"\nimport __vue_script__ from \"!!babel-loader!./js/appS07.js\"/* template */\nimport __vue_template__ from \"!!../../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a336dff0\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./appS07.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/pages/appDigital/appS07/appS07.vue\n// module id = null\n// module chunks = ","(function(root) {\n  'use strict';\n\n  function _isFunction(v) {\n    return typeof v === 'function';\n  }\n\n  function _result(v) {\n    return _isFunction(v) ? v() : v;\n  }\n\n  var toString = Object.prototype.toString;\n\n  function Spectrogram(canvas, options) {\n    if (!(this instanceof Spectrogram)) {\n      return new Spectrogram(canvas, options);\n    }\n\n    var baseCanvasOptions = options.canvas || {};\n    this._audioEnded = null;\n    this._paused = null;\n    this._pausedAt = null;\n    this._startedAt = null;\n    this._sources = {\n      audioBufferStream: null,\n      userMediaStream: null\n    };\n    this._baseCanvas = canvas;\n    this._baseCanvasContext = this._baseCanvas.getContext('2d');\n\n    this._baseCanvas.width = _result(baseCanvasOptions.width) || this._baseCanvas.width;\n    this._baseCanvas.height = _result(baseCanvasOptions.height) || this._baseCanvas.height;\n\n    window.onresize = function() {\n      this._baseCanvas.width = _result(baseCanvasOptions.width) || this._baseCanvas.width;\n      this._baseCanvas.height = _result(baseCanvasOptions.height) || this._baseCanvas.height;\n    }.bind(this);\n\n    var audioOptions = options.audio || {};\n    this.audio = audioOptions;\n\n    var colors = [];\n\n    if (typeof options.colors === 'function') {\n      colors = options.colors(275);\n    } else {\n      colors = this._generateDefaultColors(275);\n    }\n\n    this._colors = colors;\n\n    this._baseCanvasContext.fillStyle = this._getColor(0);\n    this._baseCanvasContext.fillRect(0, 0, this._baseCanvas.width, this._baseCanvas.height);\n  }\n\n  Spectrogram.prototype._init = function() {\n    var source = this._sources.audioBufferStream;\n    source.scriptNode = source.audioContext.createScriptProcessor(2048, 1, 1);\n    source.scriptNode.connect(source.audioContext.destination);\n    source.scriptNode.onaudioprocess = function(event) {\n      var array = new Uint8Array(source.analyser.frequencyBinCount);\n      source.analyser.getByteFrequencyData(array);\n\n      this._draw(array, source.canvasContext);\n    }.bind(this);\n\n    source.sourceNode.onended = function() {\n      this.stop();\n    }.bind(this);\n\n    source.analyser = source.audioContext.createAnalyser();\n    source.analyser.smoothingTimeConstant = 0;\n    source.analyser.fftSize = 1024;\n\n    source.analyser.connect(source.scriptNode);\n    source.sourceNode.connect(source.analyser);\n    if (this.audio.enable) {\n      source.sourceNode.connect(source.audioContext.destination);\n    }\n  };\n\n  Spectrogram.prototype._draw = function(array, canvasContext) {\n      if (this._paused) {\n        return false;\n      }\n\n      var canvas = canvasContext.canvas;\n      var width = canvas.width;\n      var height = canvas.height;\n      var tempCanvasContext = canvasContext._tempContext;\n      var tempCanvas = tempCanvasContext.canvas;\n      tempCanvasContext.drawImage(canvas, 0, 0, width, height);\n\n      for (var i = 0; i < array.length; i++) {\n        var value = array[i];\n        canvasContext.fillStyle = this._getColor(value);\n        if (this._audioEnded) {\n          canvasContext.fillStyle = this._getColor(0);\n        }\n        canvasContext.fillRect(width - 1, height - i, 1, 1);\n      }\n\n      canvasContext.translate(-1, 0);\n      // draw prev canvas before translation\n      canvasContext.drawImage(tempCanvas, 0, 0, width, height, 0, 0, width, height);\n      canvasContext.drawImage(tempCanvas, 0, 0, width, height, 0, 0, width, height);\n      // reset transformation matrix\n      canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n\n      this._baseCanvasContext.drawImage(canvas, 0, 0, width, height);\n  };\n\n  Spectrogram.prototype._startMediaStreamDraw = function(analyser, canvasContext) {\n    window.requestAnimationFrame(this._startMediaStreamDraw.bind(this, analyser, canvasContext));\n    var audioData = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(audioData);\n    this._draw(audioData, canvasContext);\n  };\n\n  Spectrogram.prototype.connectSource = function(audioBuffer, audioContext) {\n    var source = this._sources.audioBufferStream || {};\n\n    // clear current audio process\n    if (toString.call(source.scriptNode) === '[object ScriptProcessorNode]') {\n      source.scriptNode.onaudioprocess = null;\n    }\n\n    if (toString.call(audioBuffer) === '[object AudioBuffer]') {\n      audioContext = (!audioContext && source.audioBuffer.context) || (!audioContext && source.audioContext) || audioContext;\n\n      var sourceNode = audioContext.createBufferSource();\n      sourceNode.buffer = audioBuffer;\n\n      var canvasContext = source.canvasContext;\n\n      if (!source.canvasContext) {\n        var canvas = document.createElement('canvas');\n        canvas.width = this._baseCanvas.width;\n        canvas.height = this._baseCanvas.height;\n        canvasContext = canvas.getContext('2d');\n\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = canvas.width;\n        tempCanvas.height = canvas.height;\n\n        canvasContext._tempContext = tempCanvas.getContext('2d');\n      }\n\n      source = {\n        audioBuffer: audioBuffer,\n        audioContext: audioContext,\n        sourceNode: sourceNode,\n        analyser: null,\n        scriptNode: null,\n        canvasContext: canvasContext\n      };\n\n      this._sources.audioBufferStream = source;\n      this._init();\n    }\n\n    if (toString.call(audioBuffer) === '[object AnalyserNode]') {\n      source = this._sources.userMediaStream || {};\n      source.analyser = audioBuffer;\n      this._sources.userMediaStream = source;\n    }\n  };\n\n  Spectrogram.prototype.start = function(offset) {\n    var source = this._sources.audioBufferStream;\n    var sourceMedia = this._sources.userMediaStream;\n\n    if (source && source.sourceNode) {\n      source.sourceNode.start(0, offset||0);\n      this._audioEnded = false;\n      this._paused = false;\n      this._startedAt = Date.now();\n    }\n\n    // media stream uses an analyser for audio data\n    if (sourceMedia && sourceMedia.analyser) {\n      source = sourceMedia;\n      var canvas = document.createElement('canvas');\n      canvas.width = this._baseCanvas.width;\n      canvas.height = this._baseCanvas.height;\n      var canvasContext = canvas.getContext('2d');\n\n      var tempCanvas = document.createElement('canvas');\n      tempCanvas.width = canvas.width;\n      tempCanvas.height = canvas.height;\n\n      canvasContext._tempContext = tempCanvas.getContext('2d');\n\n      this._startMediaStreamDraw(source.analyser, canvasContext);\n    }\n  };\n\n  Spectrogram.prototype.stop = function() {\n    var source = this._sources[Object.keys(this._sources)[0]];\n    if (source && source.sourceNode) {\n      source.sourceNode.stop();\n    }\n    this._audioEnded = true;\n  };\n\n  Spectrogram.prototype.pause = function() {\n    this.stop();\n    this._paused = true;\n    this._pausedAt += Date.now() - this._startedAt;\n  };\n\n  Spectrogram.prototype.resume = function(offset) {\n    var source = this._sources[Object.keys(this._sources)[0]];\n    this._paused = false;\n    if (this._pausedAt) {\n      this.connectSource(source.audioBuffer, source.audioContext);\n      this.start(offset || (this._pausedAt / 1000));\n    }\n  };\n\n  Spectrogram.prototype.clear = function(canvasContext) {\n    var source = this._sources[Object.keys(this._sources)[0]];\n\n    this.stop();\n\n    if (toString.call(source.scriptNode) === '[object ScriptProcessorNode]') {\n      source.scriptNode.onaudioprocess = null;\n    }\n\n    canvasContext = canvasContext || source.canvasContext;\n    var canvas = canvasContext.canvas;\n    canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n    canvasContext._tempContext.clearRect(0, 0, canvas.width, canvas.height);\n    this._baseCanvasContext.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  Spectrogram.prototype._generateDefaultColors = function(steps) {\n    var frequency = Math.PI / steps;\n    var amplitude = 127;\n    var center = 128;\n    var slice = (Math.PI / 2) * 3.1;\n    var colors = [];\n\n    function toRGBString(v) {\n      return 'rgba(' + [v,v,v,1].toString() + ')';\n    }\n\n    for (var i = 0; i < steps; i++) {\n      var v = (Math.sin((frequency * i) + slice) * amplitude + center) >> 0;\n\n      colors.push(toRGBString(v));\n    }\n\n    return colors;\n  };\n\n  Spectrogram.prototype._getColor = function(index) {\n    var color = this._colors[index>>0];\n\n    if (typeof color === 'undefined') {\n      color = this._colors[0];\n    }\n\n    return color;\n  };\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = Spectrogram;\n    }\n    exports.Spectrogram = Spectrogram;\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return Spectrogram;\n    });\n  } else {\n    root.Spectrogram = Spectrogram;\n  }\n\n})(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/spectrogram/spectrogram.js\n// module id = pnVp\n// module chunks = 4"],"sourceRoot":""}